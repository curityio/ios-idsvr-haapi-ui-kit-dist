// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IdsvrHaapiUIKit
import AuthenticationServices
import Combine
import CommonCrypto
import Compression
import CryptoKit
import DeveloperToolsSupport
import DeviceCheck
import Foundation
@_exported import IdsvrHaapiUIKit
import LocalAuthentication
import OSLog
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 14.0, *)
public struct AuthenticatorSelectorStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let title: IdsvrHaapiUIKit.Message
  public let authenticators: [IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption]
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public struct AuthenticatorOption : Swift.Codable, Swift.Equatable {
    public let title: IdsvrHaapiUIKit.Message
    public let type: Swift.String?
    public let action: IdsvrHaapiUIKit.FormAction
    public static func == (a: IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption, b: IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.AuthenticatorSelectorStep, rhs: IdsvrHaapiUIKit.AuthenticatorSelectorStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct InteractiveFormStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public var actions: [IdsvrHaapiUIKit.FormAction]
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.InteractiveFormStep, rhs: IdsvrHaapiUIKit.InteractiveFormStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct RedirectionStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let redirectAction: IdsvrHaapiUIKit.FormAction
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let type: IdsvrHaapiUIKit.RepresentationType
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.RedirectionStep, rhs: IdsvrHaapiUIKit.RedirectionStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct PollingStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let mainAction: IdsvrHaapiUIKit.FormAction
  public let cancelAction: IdsvrHaapiUIKit.FormAction?
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let pollingProperties: IdsvrHaapiUIKit.PollingProperties
  public let type: IdsvrHaapiUIKit.RepresentationType
  public var properties: (any IdsvrHaapiUIKit.Properties)? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.PollingStep, rhs: IdsvrHaapiUIKit.PollingStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationResponseStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let oauthAuthorizationResponseProperties: IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public var properties: (any IdsvrHaapiUIKit.Properties)? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.OAuthAuthorizationResponseStep, rhs: IdsvrHaapiUIKit.OAuthAuthorizationResponseStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct ContinueSameStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.ContinueSameStep, rhs: IdsvrHaapiUIKit.ContinueSameStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct UserConsentStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.UserConsentStep, rhs: IdsvrHaapiUIKit.UserConsentStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct ExternalBrowserClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.ExternalBrowserClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.ExternalBrowserClientOperationStep, rhs: IdsvrHaapiUIKit.ExternalBrowserClientOperationStep) -> Swift.Bool
  public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  public func formattedParametersFromURL(_ url: Foundation.URL) throws -> [Swift.String : Swift.String]
  public var actionsToPresent: [IdsvrHaapiUIKit.Action] {
    get
  }
  public var continueFormActionModel: IdsvrHaapiUIKit.FormActionModel {
    get
  }
}
@available(iOS 14.0, *)
public struct BankIdClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let activationLink: IdsvrHaapiUIKit.Link?
  public let actionModel: IdsvrHaapiUIKit.BankIdClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.BankIdClientOperationStep, rhs: IdsvrHaapiUIKit.BankIdClientOperationStep) -> Swift.Bool
  public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  public var continueActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  public var errorActions: [IdsvrHaapiUIKit.Action] {
    get
  }
}
@available(iOS 14.0, *)
public struct EncapClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.EncapAutoActivationClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.EncapClientOperationStep, rhs: IdsvrHaapiUIKit.EncapClientOperationStep) -> Swift.Bool
  public var urlToLaunch: Foundation.URL? {
    get
  }
  public var continueActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  public var errorActions: [IdsvrHaapiUIKit.Action] {
    get
  }
}
@available(iOS 14.0, *)
public struct WebAuthnRegistrationClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let continueAction: IdsvrHaapiUIKit.FormAction
  public var fallbackActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationStep, rhs: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationStep) -> Swift.Bool
  public func formattedParametersForRegistration(credentialOptions: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions, attestationObject: Foundation.Data, rawClientDataJSON: Foundation.Data, credentialID: Foundation.Data, credentialParamType: Swift.String = "public-key") -> [Swift.String : Any]
}
@available(iOS 14.0, *)
public struct WebAuthnAuthenticationClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let continueAction: IdsvrHaapiUIKit.FormAction
  public var fallbackActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationStep, rhs: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationStep) -> Swift.Bool
  public func formattedParametersForAssertion(rawAuthenticatorData: Foundation.Data, rawClientDataJSON: Foundation.Data, signature: Foundation.Data, credentialID: Foundation.Data, credentialParamType: Swift.String = "public-key") -> [Swift.String : Any]
}
@available(iOS 14.0, *)
public struct GenericClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.GenericClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.GenericClientOperationStep, rhs: IdsvrHaapiUIKit.GenericClientOperationStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct GenericRepresentationStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.GenericRepresentationStep, rhs: IdsvrHaapiUIKit.GenericRepresentationStep) -> Swift.Bool
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiFlow {
  public static func start(_ haapiFlowResult: any IdsvrHaapiUIKit.HaapiFlowResult, haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, haapiDeepLinkManageable: (any IdsvrHaapiUIKit.HaapiDeepLinkManageable)?, nibName nibNameOrNil: Swift.String? = "HaapiFlowViewController", bundle nibBundleOrNil: Foundation.Bundle? = Bundle(for: HaapiFlowViewController.self), notificationCenter: Foundation.NotificationCenter = NotificationCenter.default) -> some SwiftUI.View
  
}
@available(iOS, introduced: 14.0, deprecated: 16.0, message: "Cannot be used in iOS 17. Use `HaapiFlowViewControllerRepresentable` instead.")
public struct HaapiFlowVCRepresentable : SwiftUI.UIViewControllerRepresentable {
  @available(*, deprecated, message: "Use `HaapiFlowViewControllerRepresentable` instead. ")
  public init(contentViewController: IdsvrHaapiUIKit.HaapiFlowViewController, presentationMode: IdsvrHaapiUIKit.PresentationMode)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: IdsvrHaapiUIKit.HaapiFlowVCRepresentable.Context) -> some UIKit.UIViewController
  
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: @_opaqueReturnTypeOf("$s15IdsvrHaapiUIKit0B19FlowVCRepresentableV20makeUIViewController7contextQr7SwiftUI0gH20RepresentableContextVyACG_tF", 0) __, context: IdsvrHaapiUIKit.HaapiFlowVCRepresentable.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = @_opaqueReturnTypeOf("$s15IdsvrHaapiUIKit0B19FlowVCRepresentableV20makeUIViewController7contextQr7SwiftUI0gH20RepresentableContextVyACG_tF", 0) __
}
@available(iOS 14.0, *)
public struct HaapiFlowViewControllerRepresentable : SwiftUI.UIViewControllerRepresentable {
  public typealias UIViewControllerType = UIKit.UIViewController
  public init(haapiFlowResult: any IdsvrHaapiUIKit.HaapiFlowResult, haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, haapiDeepLinkManageable: (any IdsvrHaapiUIKit.HaapiDeepLinkManageable)?, nibName: Swift.String?, bundle: Foundation.Bundle?, notificationCenter: Foundation.NotificationCenter = NotificationCenter.default)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: IdsvrHaapiUIKit.HaapiFlowViewControllerRepresentable.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: IdsvrHaapiUIKit.HaapiFlowViewControllerRepresentable.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
}
@objc @available(iOS 14.0, *)
final public class HaapiFlowViewModel : ObjectiveC.NSObject, Combine.ObservableObject {
  convenience public init(haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication) throws
  public init(haapiUIKitConfiguration: IdsvrHaapiUIKit.HaapiUIKitConfiguration, dataMapper: any IdsvrHaapiUIKit.DataMapper) throws
  @objc deinit
  final public func start()
  final public func submit(form: IdsvrHaapiUIKit.FormActionModel, parameters: [Swift.String : Any])
  final public func followLink(_ link: IdsvrHaapiUIKit.Link)
  final public func fetchAccessToken(authorizationCode: Swift.String)
  final public func refreshAccessToken(refreshToken: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
@available(iOS 14.0, *)
public protocol OAuthDataMapper {
  func mapTokenResponseToOAuthModel(tokenResponse: IdsvrHaapiUIKit.TokenResponse) throws -> any IdsvrHaapiUIKit.OAuthModel
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum ProblemFactory {
    public static func problem(type: IdsvrHaapiUIKit.ProblemType, metadata: IdsvrHaapiUIKit.Metadata?, title: IdsvrHaapiUIKit.Message?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link]) -> IdsvrHaapiUIKit.Problem
    public static func invalidInputField(name: Swift.String, reason: Swift.String?, detail: IdsvrHaapiUIKit.Message) -> IdsvrHaapiUIKit.InvalidInputProblem.InvalidField
    public static func invalidInput(invalidFields: [IdsvrHaapiUIKit.InvalidInputProblem.InvalidField], errorDescription: Swift.String?, type: IdsvrHaapiUIKit.ProblemType, metadata: IdsvrHaapiUIKit.Metadata?, title: IdsvrHaapiUIKit.Message?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link]) -> IdsvrHaapiUIKit.InvalidInputProblem
    public static func authorization(error: Swift.String, errorDescription: Swift.String?, type: IdsvrHaapiUIKit.ProblemType, metadata: IdsvrHaapiUIKit.Metadata?, title: IdsvrHaapiUIKit.Message?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link]) -> IdsvrHaapiUIKit.AuthorizationProblem
  }
}
public protocol HaapiUIKitApplication : AnyObject {
  @available(iOS 14.0, *)
  var haapiUIKitConfiguration: IdsvrHaapiUIKit.HaapiUIKitConfiguration { get }
  @available(iOS 14.0, *)
  var dataMapper: any IdsvrHaapiUIKit.DataMapper { get }
  @available(iOS 14.0, *)
  var genericClientOperationHandler: any IdsvrHaapiUIKit.GenericClientOperationHandler { get }
}
@available(iOS 14.0, *)
public protocol GenericClientOperationHandler {
  func handleGenericClientOperation(actionModel: IdsvrHaapiUIKit.GenericClientOperationActionModel, viewControllerProvider: ((UIKit.UIViewController) -> Swift.Void)?, onSuccess: @escaping (any IdsvrHaapiUIKit.RepresentationActionModel, [Swift.String : Any]) -> Swift.Void, onError: @escaping () -> Swift.Void)
}
public protocol HaapiDeepLinkManageable {
  func registerHaapiFlowDeeplinkable(_ haapiFlowDeepLinkable: any IdsvrHaapiUIKit.HaapiFlowDeepLinkable)
  @discardableResult
  func unregisterHaapiFlowDeeplinkable(_ haapiFlowDeepLinkable: any IdsvrHaapiUIKit.HaapiFlowDeepLinkable) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class HaapiDeepLinkManager : IdsvrHaapiUIKit.HaapiDeepLinkManageable, IdsvrHaapiUIKit.HaapiFlowDeepLinkable {
  public static let shared: IdsvrHaapiUIKit.HaapiDeepLinkManager
  public func registerHaapiFlowDeeplinkable(_ haapiFlowDeepLinkable: any IdsvrHaapiUIKit.HaapiFlowDeepLinkable)
  public func unregisterHaapiFlowDeeplinkable(_ haapiFlowDeepLinkable: any IdsvrHaapiUIKit.HaapiFlowDeepLinkable) -> Swift.Bool
  public func canHandleUrl(_ url: Foundation.URL) -> Swift.Bool
  public func handleUrl(_ url: Foundation.URL)
  @objc deinit
}
@available(iOS 14.0, *)
public class HaapiUIKitApplicationBuilder {
  public init(haapiUIKitConfiguration: IdsvrHaapiUIKit.HaapiUIKitConfiguration)
  @discardableResult
  public func setThemingPlistFileName(_ plistFileName: Swift.String, and bundle: Foundation.Bundle = .main) -> IdsvrHaapiUIKit.HaapiUIKitApplicationBuilder
  @discardableResult
  public func setGenericClientOperationHandler(_ value: any IdsvrHaapiUIKit.GenericClientOperationHandler) -> IdsvrHaapiUIKit.HaapiUIKitApplicationBuilder
  public func build() -> any IdsvrHaapiUIKit.HaapiUIKitApplication
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class AuthorizationProblem : IdsvrHaapiUIKit.Problem {
  final public let error: Swift.String
  final public let errorDescription: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@available(iOS 14.0, *)
public struct Metadata : Swift.Codable, Swift.Equatable {
  public static func == (a: IdsvrHaapiUIKit.Metadata, b: IdsvrHaapiUIKit.Metadata) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PresentationMode {
  case modal
  case stack
  public static func == (a: IdsvrHaapiUIKit.PresentationMode, b: IdsvrHaapiUIKit.PresentationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuthenticatorSelectionPresentation {
  case list
  case tabs
  public static func == (a: IdsvrHaapiUIKit.AuthenticatorSelectionPresentation, b: IdsvrHaapiUIKit.AuthenticatorSelectionPresentation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum TokenResponseFactory {
    public static func success(accessToken: Swift.String, tokenType: Swift.String?, scope: Swift.String?, expiresIn: Swift.Int, refreshToken: Swift.String?, idToken: Swift.String?) -> IdsvrHaapiUIKit.SuccessfulTokenResponse
    public static func error(error: Swift.String, errorDescription: Swift.String) -> IdsvrHaapiUIKit.ErrorTokenResponse
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum ActionFactory {
    public static func form(properties: IdsvrHaapiUIKit.FormAction.Properties?, model: IdsvrHaapiUIKit.FormActionModel, kind: IdsvrHaapiUIKit.ActionKind, title: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.FormAction
    public static func selector(properties: IdsvrHaapiUIKit.SelectorAction.Properties?, model: IdsvrHaapiUIKit.SelectorActionModel, kind: IdsvrHaapiUIKit.ActionKind, title: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.SelectorAction
    public static func clientOperation(properties: IdsvrHaapiUIKit.ClientOperationAction.Properties?, model: IdsvrHaapiUIKit.ClientOperationActionModel, kind: IdsvrHaapiUIKit.ActionKind, title: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.ClientOperationAction
  }
}
public protocol RepresentationActionModel : Swift.Decodable, Swift.Encodable, Swift.Equatable {
}
@available(iOS 14.0, *)
public struct FormActionModel : IdsvrHaapiUIKit.RepresentationActionModel {
  public let actionTitle: IdsvrHaapiUIKit.Message?
  public let continueActions: [IdsvrHaapiUIKit.Action]
  public let errorActions: [IdsvrHaapiUIKit.Action]
  public let fields: [IdsvrHaapiUIKit.FormField]
  public let type: Swift.String
  public let method: Swift.String
  public let href: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.FormActionModel, rhs: IdsvrHaapiUIKit.FormActionModel) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct SelectorActionModel : IdsvrHaapiUIKit.RepresentationActionModel {
  public let options: [IdsvrHaapiUIKit.Action]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.SelectorActionModel, rhs: IdsvrHaapiUIKit.SelectorActionModel) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class ClientOperationActionModel : IdsvrHaapiUIKit.RepresentationActionModel {
  final public let name: IdsvrHaapiUIKit.ClientOperationName
  final public let arguments: [Swift.String : Any]
  final public let continueActions: [IdsvrHaapiUIKit.Action]
  final public let errorActions: [IdsvrHaapiUIKit.Action]
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.ClientOperationActionModel, rhs: IdsvrHaapiUIKit.ClientOperationActionModel) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ExternalBrowserClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class BankIdClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public let autoStartToken: Swift.String
  final public let redirect: Swift.String
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class EncapAutoActivationClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public let activationCode: Swift.String
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public var urlToLaunch: Foundation.URL? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class WebAuthnRegistrationClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public var platformOptions: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.PlatformCredentialRequestOptions?
  final public var crossPlatformOptions: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CrossPlatformCredentialRequestOptions?
  final public var fallbackActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @_hasMissingDesignatedInitializers public class CredentialRequestOptions {
    final public let relyingPartyId: Swift.String?
    final public let challengeData: Foundation.Data?
    final public let userIdData: Foundation.Data?
    final public let userName: Swift.String?
    final public let displayName: Swift.String?
    final public let userVerification: Swift.String?
    final public let attestation: Swift.String?
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PlatformCredentialRequestOptions : IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions {
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CrossPlatformCredentialRequestOptions : IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions {
    final public let publicKeyCredParams: [IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CredentialParams]?
    final public let excludedCredentials: [IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.ExcludedCredential]?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class CredentialParams {
    final public let algorithmId: Swift.Int
    final public let type: Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class ExcludedCredential {
    final public let credentialID: Foundation.Data
    final public let type: Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class WebAuthnAuthenticationClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public var credentialOptions: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel.CredentialRequestOptions
  final public var fallbackActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @_hasMissingDesignatedInitializers final public class CredentialRequestOptions {
    final public let relyingPartyId: Swift.String?
    final public let challengeData: Foundation.Data?
    final public let platformAllowCredentials: [IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel.AllowedCredential]?
    final public let crossPlatformAllowCredentials: [IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel.AllowedCredential]?
    final public let userVerificationPreference: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class AllowedCredential {
    final public let credentialID: Foundation.Data
    final public let type: Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class GenericClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@available(iOS 14.0, *)
public typealias HaapiCompletionHandler = (_ haapiResult: IdsvrHaapiUIKit.HaapiResult) -> Swift.Void
@objc @available(iOS 14.0, *)
final public class HaapiManager : ObjectiveC.NSObject {
  public init(haapiConfiguration: any IdsvrHaapiUIKit.HaapiConfigurable) throws
  @objc deinit
  final public func close()
  public static var isSupported: Swift.Bool {
    get
  }
  final public func start(completionHandler: @escaping IdsvrHaapiUIKit.HaapiCompletionHandler)
  #if compiler(>=5.3) && $AsyncAwait
  final public func start() async -> IdsvrHaapiUIKit.HaapiResult
  #endif
  final public func submitForm(_ form: IdsvrHaapiUIKit.FormActionModel, parameters: [Swift.String : Any], completionHandler: @escaping IdsvrHaapiUIKit.HaapiCompletionHandler)
  #if compiler(>=5.3) && $AsyncAwait
  final public func submitForm(_ form: IdsvrHaapiUIKit.FormActionModel, parameters: [Swift.String : Any]) async -> IdsvrHaapiUIKit.HaapiResult
  #endif
  final public func followLink(_ link: IdsvrHaapiUIKit.Link, completionHandler: @escaping IdsvrHaapiUIKit.HaapiCompletionHandler)
  #if compiler(>=5.3) && $AsyncAwait
  final public func followLink(_ link: IdsvrHaapiUIKit.Link) async -> IdsvrHaapiUIKit.HaapiResult
  #endif
  final public var dpop: IdsvrHaapiUIKit.Dpop? {
    get
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum FormFieldFactory {
    public static func selectOption(label: IdsvrHaapiUIKit.Message, value: Swift.String, selected: Swift.Bool) -> IdsvrHaapiUIKit.SelectFormField.Option
    public static func select(options: [IdsvrHaapiUIKit.SelectFormField.Option], name: Swift.String, label: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.SelectFormField
    public static func checkbox(checked: Swift.Bool, readonly: Swift.Bool, name: Swift.String, value: Swift.String?, label: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.CheckboxFormField
    public static func password(name: Swift.String, value: Swift.String?, label: IdsvrHaapiUIKit.Message?, placeholder: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.PasswordFormField
    public static func username(name: Swift.String, value: Swift.String?, label: IdsvrHaapiUIKit.Message?, placeholder: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.UsernameFormField
    public static func text(kind: IdsvrHaapiUIKit.TextFormField.Kind?, name: Swift.String, value: Swift.String?, label: IdsvrHaapiUIKit.Message?, placeholder: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.TextFormField
    public static func context(name: Swift.String) -> IdsvrHaapiUIKit.ContextFormField
    public static func hidden(name: Swift.String, value: Swift.String) -> IdsvrHaapiUIKit.HiddenFormField
  }
}
@available(iOS 14, *)
public enum StorageError : Swift.Error {
  case writeError(cause: any Swift.Error)
  case readError(cause: any Swift.Error)
  case deleteError(cause: any Swift.Error)
}
@available(iOS 14, *)
extension IdsvrHaapiUIKit.StorageError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 14, *)
public protocol Storage {
  func read(key: Swift.String) throws -> Foundation.Data?
  func write(key: Swift.String, data: Foundation.Data) throws
  func delete(key: Swift.String) throws
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
public class KeychainStorage : IdsvrHaapiUIKit.Storage {
  public func write(key: Swift.String, data: Foundation.Data) throws
  public func read(key: Swift.String) throws -> Foundation.Data?
  public func delete(key: Swift.String) throws
  @objc deinit
}
@available(iOS 14, *)
extension Foundation.URLResponse {
  public func haapiSessionId() -> Swift.String?
  public func dpopNonce() -> Swift.String?
}
@available(iOS 14, *)
extension Foundation.URLRequest {
  public mutating func addAuthorizationHeader(headerValue: Swift.String)
  public mutating func addDpopHeader(headerValue: Swift.String)
  public mutating func addDpopAccessTokenHeaders(from dpopAccessTokenInfo: IdsvrHaapiUIKit.DpopAccessTokenInfo, httpMethod: Swift.String, url: Foundation.URL) throws
  public mutating func addHaapiMediaTypeAcceptHeader()
  public mutating func addHaapiSessionIdHeader(_ sessionId: Swift.String)
}
@available(iOS 14.0, *)
public struct SuccessfulTokenResponse : Swift.Codable, Swift.Equatable {
  public let accessToken: Swift.String
  public let tokenType: Swift.String?
  public let scope: Swift.String?
  public let expiresIn: Swift.Int
  public let refreshToken: Swift.String?
  public let idToken: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: IdsvrHaapiUIKit.SuccessfulTokenResponse, b: IdsvrHaapiUIKit.SuccessfulTokenResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 14.0, *)
public struct ErrorTokenResponse : Swift.Codable, Swift.CustomDebugStringConvertible, Swift.Equatable {
  public let error: Swift.String
  public let errorDescription: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  public var debugDescription: Swift.String {
    get
  }
  public static func == (a: IdsvrHaapiUIKit.ErrorTokenResponse, b: IdsvrHaapiUIKit.ErrorTokenResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum ActionModelFactory {
    public static func form(actionTitle: IdsvrHaapiUIKit.Message?, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action], fields: [IdsvrHaapiUIKit.FormField], type: Swift.String?, method: Swift.String, href: Swift.String) -> IdsvrHaapiUIKit.FormActionModel
    public static func selector(options: [IdsvrHaapiUIKit.Action]) -> IdsvrHaapiUIKit.SelectorActionModel
    public static func clientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) -> IdsvrHaapiUIKit.ClientOperationActionModel
    public static func externalBrowserClientOperation(arguments: [Swift.String : Swift.String], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.ExternalBrowserClientOperationActionModel
    public static func bankIdClientOperation(arguments: [Swift.String : Swift.String], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.BankIdClientOperationActionModel
    public static func encapClientOperation(arguments: [Swift.String : Swift.String], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.EncapAutoActivationClientOperationActionModel
    public static func webAuthnRegistrationClientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel
    public static func webauthnAuthenticationClientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel
    public static func genericClientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) -> IdsvrHaapiUIKit.GenericClientOperationActionModel
    public static func link(href: Swift.String, rel: Swift.String, title: IdsvrHaapiUIKit.Message?, type: Swift.String?) -> IdsvrHaapiUIKit.Link
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum PropertiesFactory {
    public static func generic(rawJsonString: Swift.String) -> IdsvrHaapiUIKit.GenericProperties
    public static func polling(rawJsonString: Swift.String, recipientOfCommunication: Swift.String?, status: IdsvrHaapiUIKit.PollingStatus) -> IdsvrHaapiUIKit.PollingProperties
    public static func oAuthAuthorizationResponse(rawJsonString: Swift.String, scope: Swift.String?, state: Swift.String?, code: Swift.String?, idToken: Swift.String?, rawJson: [Swift.String : Swift.String]) -> IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties
    public static func formAction(authenticatorType: Swift.String, rawJsonString: Swift.String) -> IdsvrHaapiUIKit.FormAction.Properties
    public static func selectorAction(rawJsonString: Swift.String) -> IdsvrHaapiUIKit.SelectorAction.Properties
    public static func clientOperation(rawJsonString: Swift.String) -> IdsvrHaapiUIKit.ClientOperationAction.Properties
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class InvalidInputProblem : IdsvrHaapiUIKit.Problem {
  final public let invalidFields: [IdsvrHaapiUIKit.InvalidInputProblem.InvalidField]
  final public let errorDescription: Swift.String?
  public struct InvalidField : Swift.Codable, Swift.Equatable {
    public let name: Swift.String
    public let reason: Swift.String?
    public let detail: IdsvrHaapiUIKit.Message
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public static func == (a: IdsvrHaapiUIKit.InvalidInputProblem.InvalidField, b: IdsvrHaapiUIKit.InvalidInputProblem.InvalidField) -> Swift.Bool
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum DriverFollowUpTag : Swift.String, IdsvrHaapiUIKit.FollowUpTag, Swift.CaseIterable {
  case flow
  case storage
  case http
  case attestation
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiUIKit.DriverFollowUpTag]
  public typealias RawValue = Swift.String
  public static var allCases: [IdsvrHaapiUIKit.DriverFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
extension UIKit.UIImage {
  public static func bundledImage(named name: Swift.String) -> UIKit.UIImage?
}
@available(iOS 14.0, *)
public typealias HttpHeadersProvider = () -> [Swift.String : Swift.String]
@available(iOS 14.0, *)
public typealias OAuthAuthorizationParametersProvider = () -> IdsvrHaapiUIKit.OAuthAuthorizationParameters
@available(iOS 14.0, *)
public protocol HaapiConfigurable {
  var name: Swift.String { get }
  var clientId: Swift.String { get }
  var baseURL: Foundation.URL { get }
  var tokenEndpointURL: Foundation.URL { get }
  var authorizationEndpointURL: Foundation.URL { get }
  var appRedirect: Swift.String { get }
  var urlSession: Foundation.URLSession { get }
  var isAutoRedirect: Swift.Bool { get }
  var httpHeadersProvider: IdsvrHaapiUIKit.HttpHeadersProvider? { get }
  var authorizationParametersProvider: IdsvrHaapiUIKit.OAuthAuthorizationParametersProvider? { get }
  var minTokenTtl: Foundation.TimeInterval { get }
  var attestationConfiguration: IdsvrHaapiUIKit.AttestationConfiguration { get }
  var tokenBoundConfiguration: any IdsvrHaapiUIKit.TokenBoundConfiguration { get }
}
@available(iOS 14.0, *)
final public class HaapiConfiguration : IdsvrHaapiUIKit.HaapiConfigurable, IdsvrHaapiUIKit.OAuthTokenConfigurable {
  final public let name: Swift.String
  final public let clientId: Swift.String
  final public let baseURL: Foundation.URL
  final public let tokenEndpointURL: Foundation.URL
  final public let authorizationEndpointURL: Foundation.URL
  final public let appRedirect: Swift.String
  final public let httpHeadersProvider: IdsvrHaapiUIKit.HttpHeadersProvider?
  final public let isAutoRedirect: Swift.Bool
  final public let urlSession: Foundation.URLSession
  final public let revocationEndpointURL: Foundation.URL?
  final public let authorizationParametersProvider: IdsvrHaapiUIKit.OAuthAuthorizationParametersProvider?
  final public let minTokenTtl: Foundation.TimeInterval
  final public let attestationConfiguration: IdsvrHaapiUIKit.AttestationConfiguration
  final public let tokenBoundConfiguration: any IdsvrHaapiUIKit.TokenBoundConfiguration
  public init(name: Swift.String, clientId: Swift.String, baseURL: Foundation.URL, tokenEndpointURL: Foundation.URL, authorizationEndpointURL: Foundation.URL, appRedirect: Swift.String, httpHeadersProvider: IdsvrHaapiUIKit.HttpHeadersProvider?, authorizationParametersProvider: IdsvrHaapiUIKit.OAuthAuthorizationParametersProvider?, isAutoRedirect: Swift.Bool = true, urlSession: Foundation.URLSession = URLSession(configuration: .haapi), revocationEndpointURL: Foundation.URL? = nil, minTokenTtl: Foundation.TimeInterval = TimeInterval(floatLiteral: 10.0), attestationConfiguration: IdsvrHaapiUIKit.AttestationConfiguration = AttestationConfiguration(), tokenBoundConfiguration: any IdsvrHaapiUIKit.TokenBoundConfiguration = UnboundedTokenConfiguration())
  @objc deinit
}
@available(iOS 14.0, *)
extension Foundation.URLSessionConfiguration {
  public static var haapi: Foundation.URLSessionConfiguration {
    get
  }
}
@available(iOS 14.0, *)
public struct AttestationConfiguration {
  public init(useAttestation: Swift.Bool = true, attestationMaxRetries: Swift.Int = 3)
}
@available(iOS 14.0, *)
@frozen public enum ProblemType : Swift.Codable, Swift.Equatable {
  case authenticationFailedProblem
  case invalidInputProblem
  case incorrectCredentialsProblem
  case errorAuthorizationResponseProblem
  case unexpectedProblem
  case tooManyAttemptsProblem
  case genericUserProblem
  case sessionAndAccessTokenMismatchProblem
  case other(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ProblemType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: IdsvrHaapiUIKit.ProblemType.RawValue)
  public var rawValue: IdsvrHaapiUIKit.ProblemType.RawValue {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class HaapiFlow {
  public static func start(from presentedViewController: any IdsvrHaapiUIKit.HaapiFlowResultViewController, haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, haapiDeepLinkManageable: (any IdsvrHaapiUIKit.HaapiDeepLinkManageable)?, animated: Swift.Bool = true, nibName nibNameOrNil: Swift.String? = "HaapiFlowViewController", bundle nibBundleOrNil: Foundation.Bundle? = Bundle(for: HaapiFlowViewController.self)) throws
  @objc deinit
}
@available(iOS 14.0, *)
public struct Link : IdsvrHaapiUIKit.RepresentationActionModel {
  public let href: Swift.String
  public let rel: Swift.String
  public let title: IdsvrHaapiUIKit.Message?
  public let type: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: IdsvrHaapiUIKit.Link, b: IdsvrHaapiUIKit.Link) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class HaapiTokenResult : ObjectiveC.NSObject {
  @objc final public let dPopAccessTokenInfo: IdsvrHaapiUIKit.DpopAccessTokenInfo?
  @objc final public let error: (any Swift.Error)?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class FormField : Swift.Codable, Swift.Equatable {
  final public let name: Swift.String
  final public let label: IdsvrHaapiUIKit.Message?
  final public let placeholder: IdsvrHaapiUIKit.Message?
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.FormField, rhs: IdsvrHaapiUIKit.FormField) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class PasswordFormField : IdsvrHaapiUIKit.FormField {
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class UsernameFormField : IdsvrHaapiUIKit.FormField {
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class TextFormField : IdsvrHaapiUIKit.FormField {
  @frozen public enum Kind : Swift.RawRepresentable, Swift.Codable, Swift.Equatable {
    public typealias RawValue = Swift.String
    case number
    case email
    case url
    case tel
    case color
    case unknown(value: Swift.String)
    public init(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  final public let kind: IdsvrHaapiUIKit.TextFormField.Kind?
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class SelectFormField : IdsvrHaapiUIKit.FormField {
  final public let options: [IdsvrHaapiUIKit.SelectFormField.Option]
  final public let value: Swift.String?
  public struct Option : Swift.Codable, Swift.Equatable {
    public let label: IdsvrHaapiUIKit.Message
    public let value: Swift.String
    public let selected: Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public static func == (a: IdsvrHaapiUIKit.SelectFormField.Option, b: IdsvrHaapiUIKit.SelectFormField.Option) -> Swift.Bool
  }
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class CheckboxFormField : IdsvrHaapiUIKit.FormField {
  final public let checked: Swift.Bool
  final public let readonly: Swift.Bool
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ContextFormField : IdsvrHaapiUIKit.FormField {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class HiddenFormField : IdsvrHaapiUIKit.FormField {
  final public let value: Swift.String
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@available(iOS 14.0, *)
public protocol Properties : Swift.Decodable, Swift.Encodable {
  var rawJsonString: Swift.String { get }
}
@available(iOS 14.0, *)
public struct GenericProperties : IdsvrHaapiUIKit.Properties, Swift.Equatable {
  public let rawJsonString: Swift.String
  public static func == (lhs: IdsvrHaapiUIKit.GenericProperties, rhs: IdsvrHaapiUIKit.GenericProperties) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationResponseProperties : IdsvrHaapiUIKit.Properties, Swift.Equatable {
  public let rawJsonString: Swift.String
  public let scope: Swift.String?
  public let state: Swift.String?
  public let code: Swift.String?
  public let idToken: Swift.String?
  public let rawJson: [Swift.String : Swift.String]
  public static func == (a: IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties, b: IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
public struct PollingProperties : IdsvrHaapiUIKit.Properties, Swift.Equatable {
  public let rawJsonString: Swift.String
  public let recipientOfCommunication: Swift.String?
  public let status: IdsvrHaapiUIKit.PollingStatus
  public static func == (a: IdsvrHaapiUIKit.PollingProperties, b: IdsvrHaapiUIKit.PollingProperties) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class AccessToken : ObjectiveC.NSObject {
  @objc final public let value: Swift.String
  @objc final public let expiresOn: Foundation.Date
  @objc public func isValid(atTime: Foundation.Date, minTtl: Foundation.TimeInterval) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class DpopAccessTokenInfo : ObjectiveC.NSObject {
  @objc final public let accessToken: IdsvrHaapiUIKit.AccessToken
  @objc final public let dpop: IdsvrHaapiUIKit.Dpop
  @objc final public let dpopNonce: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc public func dpopHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func authorizationHeaderValue() -> Swift.String
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@available(iOS 14.0, *)
public struct UserMessage : Swift.Codable, Swift.Equatable {
  public let text: IdsvrHaapiUIKit.Message
  public let classList: [Swift.String]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: IdsvrHaapiUIKit.UserMessage, b: IdsvrHaapiUIKit.UserMessage) -> Swift.Bool
}
@available(iOS 14.0, *)
@frozen public enum PollingStatus : Swift.Codable, Swift.Equatable {
  case pending
  case done
  case failed
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.PollingStatus : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum StepFactory {
    public static func authenticatorOption(title: IdsvrHaapiUIKit.Message, type: Swift.String?, action: IdsvrHaapiUIKit.FormAction) -> IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption
    public static func authenticatorSelector(title: IdsvrHaapiUIKit.Message, authenticators: [IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption], metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?) -> IdsvrHaapiUIKit.AuthenticatorSelectorStep
    public static func interactiveForm(actions: [IdsvrHaapiUIKit.FormAction], type: IdsvrHaapiUIKit.RepresentationType, metadata: IdsvrHaapiUIKit.Metadata?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?) -> IdsvrHaapiUIKit.InteractiveFormStep
    public static func redirection(redirectAction: IdsvrHaapiUIKit.FormAction, metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], properties: IdsvrHaapiUIKit.GenericProperties?) -> IdsvrHaapiUIKit.RedirectionStep
    public static func polling(mainAction: IdsvrHaapiUIKit.FormAction, cancelAction: IdsvrHaapiUIKit.FormAction?, metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.PollingProperties) -> IdsvrHaapiUIKit.PollingStep
    public static func oAuthAuthorization(metadata: IdsvrHaapiUIKit.Metadata?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties) -> IdsvrHaapiUIKit.OAuthAuthorizationResponseStep
    public static func continueSame(metadata: IdsvrHaapiUIKit.Metadata?, messages: [IdsvrHaapiUIKit.UserMessage], properties: IdsvrHaapiUIKit.GenericProperties?) -> IdsvrHaapiUIKit.ContinueSameStep
    public static func userConsent(metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?) -> IdsvrHaapiUIKit.UserConsentStep
    public static func externalBrowserClientOperation(actionModel: IdsvrHaapiUIKit.ExternalBrowserClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], properties: IdsvrHaapiUIKit.GenericProperties?) -> IdsvrHaapiUIKit.ExternalBrowserClientOperationStep
    public static func bankIdClientOperation(activationLink: IdsvrHaapiUIKit.Link?, actionModel: IdsvrHaapiUIKit.BankIdClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?) -> IdsvrHaapiUIKit.BankIdClientOperationStep
    public static func encapClientOperation(actionModel: IdsvrHaapiUIKit.EncapAutoActivationClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?) -> IdsvrHaapiUIKit.EncapClientOperationStep
    public static func webauthnRegistrationClientOperation(actionModel: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?) throws -> IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationStep
    public static func webAuthnAuthenticationClientOperation(actionModel: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?) throws -> IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationStep
    public static func genericClientOperation(actionModel: IdsvrHaapiUIKit.GenericClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?) -> IdsvrHaapiUIKit.GenericClientOperationStep
    public static func genericRepresentation(type: IdsvrHaapiUIKit.RepresentationType, metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: (any IdsvrHaapiUIKit.Properties)?) -> IdsvrHaapiUIKit.GenericRepresentationStep
  }
}
@available(iOS 14.0, *)
@frozen public enum HaapiResult {
  case representation(any IdsvrHaapiUIKit.HaapiRepresentation)
  case problem(any IdsvrHaapiUIKit.ProblemRepresentation)
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
public protocol HaapiRepresentation : Swift.Decodable, Swift.Encodable {
  var metadata: IdsvrHaapiUIKit.Metadata? { get }
  var type: IdsvrHaapiUIKit.RepresentationType { get }
  var properties: (any IdsvrHaapiUIKit.Properties)? { get }
  var links: [IdsvrHaapiUIKit.Link] { get }
  var messages: [IdsvrHaapiUIKit.UserMessage] { get }
}
@available(iOS 14.0, *)
public protocol ProblemRepresentation : Swift.Decodable, Swift.Encodable {
  var metadata: IdsvrHaapiUIKit.Metadata? { get }
  var type: IdsvrHaapiUIKit.ProblemType { get }
  var title: IdsvrHaapiUIKit.Message? { get }
  var messages: [IdsvrHaapiUIKit.UserMessage] { get }
  var links: [IdsvrHaapiUIKit.Link] { get }
}
@available(iOS 14.0, *)
public protocol ClientOperationStep : IdsvrHaapiUIKit.HaapiRepresentation {
}
@available(iOS 14.0, *)
public struct HaapiUIKitConfiguration {
}
@available(iOS 14.0, *)
public class HaapiUIKitConfigurationBuilder {
  public init(clientId: Swift.String, baseUrl: Foundation.URL, tokenEndpointUrl: Foundation.URL, authorizationEndpointUrl: Foundation.URL, appRedirect: Swift.String)
  @discardableResult
  public func setAutoPollingDuration(duration: Foundation.TimeInterval) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setPresentationMode(mode: IdsvrHaapiUIKit.PresentationMode) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setAuthenticationSelectionPresentation(presentation: IdsvrHaapiUIKit.AuthenticatorSelectionPresentation) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setShouldAutoHandleFlowErrorFeedback(value: Swift.Bool) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setShouldConfirmInterruptionFlow(value: Swift.Bool) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setUseDefaultExternalBrowser(value: Swift.Bool) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setKeyStoreAlias(alias: Swift.String) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setOauthAuthorizationParamsProvider(provider: @escaping IdsvrHaapiUIKit.OAuthAuthorizationParametersProvider) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setHttpHeadersProvider(provider: @escaping IdsvrHaapiUIKit.HttpHeadersProvider) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setIsAutoRedirect(value: Swift.Bool) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setURLSession(session: Foundation.URLSession) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setMinTokenTtl(value: Foundation.TimeInterval) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setRevocationEndpointUrl(endpoint: Foundation.URL) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  public func build() -> IdsvrHaapiUIKit.HaapiUIKitConfiguration
  @objc deinit
}
public enum SdkFollowUpTag : Swift.String, IdsvrHaapiUIKit.FollowUpTag, Swift.CaseIterable {
  case flow
  case http
  case mapping
  case oAuth
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiUIKit.SdkFollowUpTag]
  public typealias RawValue = Swift.String
  public static var allCases: [IdsvrHaapiUIKit.SdkFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum CryptoKeyType : Swift.Int, Swift.RawRepresentable {
  case p256
  case secureEnclave
  case security
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@objc public protocol TokenBoundConfiguration {
  @objc var keyPairType: IdsvrHaapiUIKit.CryptoKeyType { get }
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@objc public class UnboundedTokenConfiguration : ObjectiveC.NSObject, IdsvrHaapiUIKit.TokenBoundConfiguration {
  @objc public var keyPairType: IdsvrHaapiUIKit.CryptoKeyType
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 14.0, *)
@objc public class BoundedTokenConfiguration : ObjectiveC.NSObject, IdsvrHaapiUIKit.TokenBoundConfiguration {
  @objc final public let keyPairType: IdsvrHaapiUIKit.CryptoKeyType
  public init(keyPairType: IdsvrHaapiUIKit.CryptoKeyType = .secureEnclave)
  @objc deinit
}
@available(iOS 14.0, *)
public typealias OAuthLifecycleResultListener = IdsvrHaapiUIKit.HaapiFlowResult
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class OAuthLifecycle {
  public static func refreshToken(refreshToken: Swift.String, haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, lifecycleResultListener: any IdsvrHaapiUIKit.HaapiFlowResult)
  @objc deinit
}
@available(iOS 14.0, *)
@frozen public enum ClientOperationName : Swift.Codable, Swift.Equatable {
  case externalBrowser
  case bankId
  case encapAutoActivation
  case webAuthnRegistration
  case webAuthnAuthentication
  case unknown(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ClientOperationName : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @available(iOS 14.0, *)
@objcMembers public class HaapiTokenManagerBuilder : ObjectiveC.NSObject {
  @objc public init(tokenEndpoint: Foundation.URL, clientId: Swift.String)
  @objc @discardableResult
  public func setName(_ name: Swift.String) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setInternalUrlSession(_ urlSession: Foundation.URLSession) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setHaapiTokenMinTtl(_ minTtl: Foundation.TimeInterval) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func disableDeviceCheckAttestation() -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setAttestationMaxRetryCount(maxRetries: Swift.Int) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setTokenBoundConfiguration(config: any IdsvrHaapiUIKit.TokenBoundConfiguration) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc public func build() throws -> IdsvrHaapiUIKit.HaapiTokenManager
  @objc deinit
}
@available(iOS 14.0, *)
public typealias OAuthCompletion = (_ tokenResponse: IdsvrHaapiUIKit.TokenResponse) -> Swift.Void
@available(iOS 14.0, *)
public typealias OAuthRevocationCompletion = (_ response: IdsvrHaapiUIKit.TokenRevocationResponse) -> Swift.Void
@available(iOS 14.0, *)
@frozen public enum TokenResponse {
  case successfulToken(IdsvrHaapiUIKit.SuccessfulTokenResponse)
  case errorToken(IdsvrHaapiUIKit.ErrorTokenResponse)
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
@frozen public enum TokenRevocationResponse {
  case success
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
public protocol OAuthTokenConfigurable {
  var clientId: Swift.String { get }
  var tokenEndpointURL: Foundation.URL { get }
  var appRedirect: Swift.String { get }
  var urlSession: Foundation.URLSession { get }
  var revocationEndpointURL: Foundation.URL? { get }
  var tokenBoundConfiguration: any IdsvrHaapiUIKit.TokenBoundConfiguration { get }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class OAuthTokenManager {
  convenience public init(oauthTokenConfiguration: any IdsvrHaapiUIKit.OAuthTokenConfigurable)
  final public func fetchAccessToken(with authorizationCode: Swift.String, dpop: IdsvrHaapiUIKit.Dpop? = nil, completionHandler: @escaping IdsvrHaapiUIKit.OAuthCompletion)
  final public func refreshAccessToken(with refreshToken: Swift.String, completionHandler: @escaping IdsvrHaapiUIKit.OAuthCompletion)
  final public func revokeAccessToken(with token: Swift.String, completionHandler: @escaping IdsvrHaapiUIKit.OAuthRevocationCompletion)
  final public func revokeRefreshToken(with token: Swift.String, completionHandler: @escaping IdsvrHaapiUIKit.OAuthRevocationCompletion)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Haapi : ObjectiveC.NSObject {
  @objc public static var isSupported: Swift.Bool {
    @objc get
  }
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class Dpop : ObjectiveC.NSObject, Swift.Codable {
  @objc public var jwkThumbprint: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc @available(swift, obsoleted: 0.1, message: "Use `createProof(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func createProof(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func createProof(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc @available(swift, obsoleted: 0.1, message: "Use `getHeaderValue(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc deinit
}
public protocol HaapiFlowDeepLinkable : AnyObject {
  func canHandleUrl(_ url: Foundation.URL) -> Swift.Bool
  func handleUrl(_ url: Foundation.URL)
}
@available(iOS 14.0, *)
public protocol HaapiFlowResultViewController : UIKit.UIViewController, IdsvrHaapiUIKit.HaapiFlowResult {
}
@available(iOS 14.0, *)
public protocol HaapiFlowResult {
  func didReceiveOAuthModel(_ oAuthModel: any IdsvrHaapiUIKit.OAuthModel)
  func didReceiveError(_ error: any Swift.Error)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@_Concurrency.MainActor(unsafe) public class HaapiFlowViewController : UIKit.UIViewController, IdsvrHaapiUIKit.HaapiFlowDeepLinkable {
  @_Concurrency.MainActor(unsafe) convenience public init(haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, haapiFlowResult: (any IdsvrHaapiUIKit.HaapiFlowResult)?, haapiDeepLinkManageable: (any IdsvrHaapiUIKit.HaapiDeepLinkManageable)?, nibName nibNameOrNil: Swift.String? = "HaapiFlowViewController", bundle nibBundleOrNil: Foundation.Bundle? = Bundle(for: HaapiFlowViewController.self), notificationCenter: Foundation.NotificationCenter = NotificationCenter.default) throws
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func canHandleUrl(_ url: Foundation.URL) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func handleUrl(_ url: Foundation.URL)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiFlowViewController : AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiFlowViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerShouldDismiss(_ presentationController: UIKit.UIPresentationController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerDidAttemptToDismiss(_ presentationController: UIKit.UIPresentationController)
}
@available(iOS 13.0, *)
extension Combine.Publisher where Self.Failure == Swift.Never {
  public func dropFirstAndSink(receiveValue: @escaping (Self.Output) -> Swift.Void) -> Combine.AnyCancellable
  public func dropFirstAndSinkOnMainThread(receiveValue: @escaping (Self.Output) -> Swift.Void) -> Combine.AnyCancellable
}
@available(iOS 14.0, *)
public enum HaapiModel {
  public enum ContentFactory {
    public static func metadata(templateArea: Swift.String?, viewName: Swift.String?) -> IdsvrHaapiUIKit.Metadata?
    public static func message(key: Swift.String?, literal: Swift.String) -> IdsvrHaapiUIKit.Message
    public static func userMessage(text: IdsvrHaapiUIKit.Message, classList: [Swift.String]) -> IdsvrHaapiUIKit.UserMessage
  }
}
public protocol Masking {
  var masked: Swift.String { get }
}
extension Swift.String : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension ObjectiveC.NSObject : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URL : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.Data : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.Dictionary : IdsvrHaapiUIKit.Masking where Key == Swift.String {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URLRequest : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.String {
  public static func optionalData(_ data: Foundation.Data?, encoding: Swift.String.Encoding = .utf8, fallback: Swift.String = "") -> Swift.String
  public var maskedPrefix: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.CryptoKeyType : Swift.Codable {
}
public protocol ViewLoadable : AnyObject {
  func startLoading()
  func stopLoading()
  var isLoading: Swift.Bool { get }
}
@available(iOS 14.0, *)
public protocol DataMapper {
  func mapClientOperationStepToOperation(clientOperation: any IdsvrHaapiUIKit.ClientOperationStep) throws -> (any IdsvrHaapiUIKit.UIOperationModel)?
  func mapHaapiRepresentationToInteraction(haapiRepresentation: any IdsvrHaapiUIKit.HaapiRepresentation) throws -> (any IdsvrHaapiUIKit.UIInteractionModel)?
  func mapHaapiRepresentationToOperation(haapiRepresentation: any IdsvrHaapiUIKit.HaapiRepresentation) throws -> (any IdsvrHaapiUIKit.UIOperationModel)?
  func mapHaapiResultToUIModel(haapiResult: IdsvrHaapiUIKit.HaapiResult) throws -> (any IdsvrHaapiUIKit.UIModel)?
  func mapProblemRepresentationToProblem(problemRepresentation: any IdsvrHaapiUIKit.ProblemRepresentation) throws -> (any IdsvrHaapiUIKit.UIProblemModel)?
  func mapRepresentationActionModelToUIInteractionModel(representationActionModel: any IdsvrHaapiUIKit.RepresentationActionModel) throws -> (any IdsvrHaapiUIKit.UIInteractionModel)?
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationParameters {
  public let scopes: [Swift.String]
  public let nonce: Swift.String?
  public let acrValues: [Swift.String]
  public let extraRequestParameters: [Swift.String : Swift.String]
  public init(scopes: [Swift.String] = [], nonce: Swift.String? = nil, acrValues: [Swift.String] = [], extraRequestParameters: [Swift.String : Swift.String] = [:])
}
@available(iOS 14, *)
public enum HttpHeaderNames {
  public static let accept: Swift.String
  public static let authorization: Swift.String
  public static let contentType: Swift.String
  public static let dpop: Swift.String
  public static let haapiSessionId: Swift.String
  public static let haapiSetSessionId: Swift.String
  public static let dpopNonce: Swift.String
  public static let wwwAuthenticate: Swift.String
}
@available(iOS 14, *)
public enum MimeTypes : Swift.String {
  case happi
  case json
  case xWwwFormUrlEncoded
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HaapiLogger : ObjectiveC.NSObject {
  public static var followUpTags: [any IdsvrHaapiUIKit.FollowUpTag] {
    get
    set
  }
  @objc public static var isDebugEnabled: Swift.Bool
  @objc public static var isInfoEnabled: Swift.Bool
  @objc public static var isWarningEnabled: Swift.Bool
  @objc public static var isErrorEnabled: Swift.Bool
  @objc public static var isSensitiveValueMasked: Swift.Bool
  public static func appendLogSink(_ logSink: any IdsvrHaapiUIKit.LogSink)
  @objc deinit
}
public enum LogType : Swift.String {
  case debug
  case error
  case info
  case warning
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol LogSink {
  func writeLog(logType: IdsvrHaapiUIKit.LogType, followUpTag: any IdsvrHaapiUIKit.FollowUpTag, message: Swift.String, file: Swift.String, line: Swift.Int)
}
@available(iOS 14.0, *)
public enum HaapiUIKitError : Swift.Error {
  case illegalState(_: Swift.String)
  case unsupportedMap(objName: Swift.String, expectedObjName: Swift.String)
  case unsupported(cause: Swift.String)
  case other(_: any Swift.Error)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiUIKitError : Foundation.LocalizedError, Swift.Equatable {
  public static func == (lhs: IdsvrHaapiUIKit.HaapiUIKitError, rhs: IdsvrHaapiUIKit.HaapiUIKitError) -> Swift.Bool
  public var errorDescription: Swift.String? {
    get
  }
}
public enum UIKitFollowUpTag : Swift.String, IdsvrHaapiUIKit.FollowUpTag, Swift.CaseIterable {
  case data
  case component
  case theming
  case flow
  case swiftUI
  case mapping
  case layout
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiUIKit.UIKitFollowUpTag]
  public typealias RawValue = Swift.String
  public static var allCases: [IdsvrHaapiUIKit.UIKitFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13.0, *)
extension Swift.StringProtocol {
  public var sha256Hex: Swift.String {
    get
  }
  public var dataUtf8Encoding: Foundation.Data {
    get
  }
}
extension Foundation.Data {
  public var stringUtf8Encoding: Swift.String? {
    get
  }
}
@available(iOS 14.0, *)
@frozen public enum RepresentationType : Swift.Codable, Swift.Equatable {
  case authenticationStep
  case redirectionStep
  case registrationStep
  case pollingStep
  case continueSameStep
  case oauthAuthorizationResponse
  case consentorStep
  case userConsentStep
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.RepresentationType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
@frozen public enum ActionKind : Swift.Codable, Swift.Equatable {
  case cancel
  case deviceOption
  case login
  case `continue`
  case continueAutoLogin
  case deviceSelector
  case redirect
  case authenticatorSelector
  case selectAuthenticator
  case poll
  case form
  case bankIdSameDevice
  case bankIdOtherDevice
  case passwordReset
  case accountIdRecovery
  case userRegister
  case other(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ActionKind : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init(rawValue: IdsvrHaapiUIKit.ActionKind.RawValue)
  public var rawValue: Swift.String {
    get
  }
}
public enum TestingEnvironment : Swift.String {
  case componentName
  case componentDefinition
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TestingArgument : Swift.String {
  case uiTests
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class Action : Swift.Codable, Swift.Equatable {
  final public let kind: IdsvrHaapiUIKit.ActionKind
  final public let title: IdsvrHaapiUIKit.Message?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.Action, rhs: IdsvrHaapiUIKit.Action) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ClientOperationAction : IdsvrHaapiUIKit.Action {
  final public let model: IdsvrHaapiUIKit.ClientOperationActionModel
  final public let properties: IdsvrHaapiUIKit.ClientOperationAction.Properties?
  public struct Properties : Swift.Codable, Swift.Equatable {
    public let rawJsonString: Swift.String
    public static func == (lhs: IdsvrHaapiUIKit.ClientOperationAction.Properties, rhs: IdsvrHaapiUIKit.ClientOperationAction.Properties) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class FormAction : IdsvrHaapiUIKit.Action {
  final public let model: IdsvrHaapiUIKit.FormActionModel
  final public let properties: IdsvrHaapiUIKit.FormAction.Properties?
  public struct Properties : Swift.Codable, Swift.Equatable {
    public let authenticatorType: Swift.String
    public let rawJsonString: Swift.String
    public static func == (lhs: IdsvrHaapiUIKit.FormAction.Properties, rhs: IdsvrHaapiUIKit.FormAction.Properties) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class SelectorAction : IdsvrHaapiUIKit.Action {
  final public let model: IdsvrHaapiUIKit.SelectorActionModel
  final public let properties: IdsvrHaapiUIKit.SelectorAction.Properties?
  public struct Properties : Swift.Codable, Swift.Equatable {
    public let rawJsonString: Swift.String
    public static func == (lhs: IdsvrHaapiUIKit.SelectorAction.Properties, rhs: IdsvrHaapiUIKit.SelectorAction.Properties) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@available(iOS 14, *)
public struct ResponseAndData {
  public let response: Foundation.URLResponse
  public let data: Foundation.Data?
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class HaapiClient : ObjectiveC.NSObject {
  public var dpop: IdsvrHaapiUIKit.Dpop? {
    get
  }
  public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Swift.Result<IdsvrHaapiUIKit.ResponseAndData, any Swift.Error>) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class HaapiTokenManager : ObjectiveC.NSObject {
  @objc final public var dpop: IdsvrHaapiUIKit.Dpop? {
    @objc get
  }
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiTokenManager {
  @objc final public func createClient(urlSession: Foundation.URLSession? = nil) -> IdsvrHaapiUIKit.HaapiClient
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiUIKit.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, completionHandler: @escaping (IdsvrHaapiUIKit.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiUIKit.DpopAccessTokenInfo, IdsvrHaapiUIKit.HaapiError>) -> Swift.Void)
  @objc final public func close()
  @objc final public func clearState()
  @available(*, unavailable, renamed: "getHaapiToken(forceFresh:dpopNonce:completionHandler:)", message: "Deprecated. Please use getHaapiToken(forceFresh:dpopNonce:completionHandler:)")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiUIKit.DpopAccessTokenInfo, IdsvrHaapiUIKit.HaapiError>) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (IdsvrHaapiUIKit.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiUIKit.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false) -> IdsvrHaapiUIKit.HaapiTokenResult?
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String?) -> IdsvrHaapiUIKit.HaapiTokenResult?
}
public protocol UIModel : IdsvrHaapiUIKit.Masking, Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
}
extension IdsvrHaapiUIKit.UIModel {
  public var masked: Swift.String {
    get
  }
}
public protocol UIOperationModel : IdsvrHaapiUIKit.UIModel {
  var url: Foundation.URL? { get }
  var interactionModel: (any IdsvrHaapiUIKit.UIInteractionModel)? { get }
  var errorInteractionModel: (any IdsvrHaapiUIKit.UIInteractionModel)? { get }
  var problem: any IdsvrHaapiUIKit.UIProblemModel { get }
}
extension IdsvrHaapiUIKit.UIOperationModel {
  public var description: Swift.String {
    get
  }
}
public protocol UIProblemModel : IdsvrHaapiUIKit.UIModel {
  var title: Swift.String? { get }
  var message: Swift.String { get }
}
extension IdsvrHaapiUIKit.UIProblemModel {
  public var description: Swift.String {
    get
  }
}
public protocol UIInteractionModel : IdsvrHaapiUIKit.UIModel {
  var templateArea: Swift.String? { get }
  var viewName: Swift.String? { get }
}
extension IdsvrHaapiUIKit.UIInteractionModel {
  public var description: Swift.String {
    get
  }
}
public protocol OAuthModel {
}
public protocol OAuthErrorModel : IdsvrHaapiUIKit.OAuthModel {
  var error: Swift.String? { get }
  var errorDescription: Swift.String { get }
}
public protocol OAuthTokenModel : IdsvrHaapiUIKit.OAuthModel {
  var accessToken: Swift.String { get }
  var tokenType: Swift.String? { get }
  var scope: Swift.String? { get }
  var expiresIn: Swift.Int { get }
  var refreshToken: Swift.String? { get }
  var idToken: Swift.String? { get }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class Problem : IdsvrHaapiUIKit.ProblemRepresentation, Swift.Equatable {
  final public let type: IdsvrHaapiUIKit.ProblemType
  final public let metadata: IdsvrHaapiUIKit.Metadata?
  final public let title: IdsvrHaapiUIKit.Message?
  final public let messages: [IdsvrHaapiUIKit.UserMessage]
  final public let links: [IdsvrHaapiUIKit.Link]
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.Problem, rhs: IdsvrHaapiUIKit.Problem) -> Swift.Bool
  @objc deinit
}
public protocol FollowUpTag {
  var subsystem: Swift.String { get }
  var tagName: Swift.String { get }
}
extension IdsvrHaapiUIKit.FollowUpTag {
  public var osLog: os.OSLog {
    get
  }
}
@available(iOS 14, *)
public enum HaapiError : Swift.Error {
  case communication(message: Swift.String, cause: (any Swift.Error)? = nil)
  case serverError(_: Swift.String, errorDescription: Swift.String, statusCode: Swift.Int)
  case invalidStatusCode(_: Swift.Int)
  case attestationNotSupported
  case attestationFailure(cause: (any Swift.Error)? = nil)
  case attestationKeyGenFailure(cause: (any Swift.Error)? = nil)
  case attestationRefusedByServer(cause: (any Swift.Error)? = nil)
  case assertionFailure(cause: (any Swift.Error)? = nil)
  case dpopKeyCreationFailure(cause: any Swift.Error)
  case dpopProofCreationFailure(cause: any Swift.Error)
  case dpopProofFailure(message: Swift.String, cause: any Swift.Error)
  case haapiTokenManagerIsClosed
  case haapiTokenManagerIsExpired
  case illegalState(message: Swift.String)
  case invalidConfiguration(reason: Swift.String)
  case haapiTokenManagerAlreadyExists(name: Swift.String)
}
@available(iOS 14, *)
extension IdsvrHaapiUIKit.HaapiError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 14.0, *)
public struct Message : Swift.Codable, Swift.Equatable, Swift.CustomStringConvertible {
  public let key: Swift.String?
  public let literal: Swift.String
  public var description: Swift.String {
    get
  }
  public static func == (a: IdsvrHaapiUIKit.Message, b: IdsvrHaapiUIKit.Message) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension IdsvrHaapiUIKit.PresentationMode : Swift.Equatable {}
extension IdsvrHaapiUIKit.PresentationMode : Swift.Hashable {}
extension IdsvrHaapiUIKit.AuthenticatorSelectionPresentation : Swift.Equatable {}
extension IdsvrHaapiUIKit.AuthenticatorSelectionPresentation : Swift.Hashable {}
extension IdsvrHaapiUIKit.DriverFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiUIKit.DriverFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiUIKit.DriverFollowUpTag : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ProblemType : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.TextFormField.Kind : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.PollingStatus : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.PollingStatus : Swift.Sendable {}
extension IdsvrHaapiUIKit.SdkFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiUIKit.SdkFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiUIKit.SdkFollowUpTag : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.CryptoKeyType : Swift.Equatable {}
extension IdsvrHaapiUIKit.CryptoKeyType : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ClientOperationName : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.TokenRevocationResponse : Swift.Sendable {}
@available(iOS 14, *)
extension IdsvrHaapiUIKit.MimeTypes : Swift.Equatable {}
@available(iOS 14, *)
extension IdsvrHaapiUIKit.MimeTypes : Swift.Hashable {}
@available(iOS 14, *)
extension IdsvrHaapiUIKit.MimeTypes : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.LogType : Swift.Equatable {}
extension IdsvrHaapiUIKit.LogType : Swift.Hashable {}
extension IdsvrHaapiUIKit.LogType : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.UIKitFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiUIKit.UIKitFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiUIKit.UIKitFollowUpTag : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.RepresentationType : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.RepresentationType : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ActionKind : Swift.Sendable {}
extension IdsvrHaapiUIKit.TestingEnvironment : Swift.Equatable {}
extension IdsvrHaapiUIKit.TestingEnvironment : Swift.Hashable {}
extension IdsvrHaapiUIKit.TestingEnvironment : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.TestingArgument : Swift.Equatable {}
extension IdsvrHaapiUIKit.TestingArgument : Swift.Hashable {}
extension IdsvrHaapiUIKit.TestingArgument : Swift.RawRepresentable {}
