// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IdsvrHaapiUIKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AuthenticationServices
import Combine
import CommonCrypto
import Compression
import CryptoKit
import DeveloperToolsSupport
import DeviceCheck
import Foundation
@_exported import IdsvrHaapiUIKit
import LocalAuthentication
import OSLog
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 14.0, *)
public struct AuthenticatorSelectorStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let title: IdsvrHaapiUIKit.Message
  public let authenticators: [IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption]
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let rawJsonString: Swift.String?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public struct AuthenticatorOption : Swift.Codable, Swift.Equatable {
    public let title: IdsvrHaapiUIKit.Message
    public let type: Swift.String?
    public let action: IdsvrHaapiUIKit.FormAction
    public static func == (a: IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption, b: IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.AuthenticatorSelectorStep, rhs: IdsvrHaapiUIKit.AuthenticatorSelectorStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct InteractiveFormStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public var actions: [IdsvrHaapiUIKit.FormAction]
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.InteractiveFormStep, rhs: IdsvrHaapiUIKit.InteractiveFormStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct RedirectionStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let redirectAction: IdsvrHaapiUIKit.FormAction
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.RedirectionStep, rhs: IdsvrHaapiUIKit.RedirectionStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct PollingStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let mainAction: IdsvrHaapiUIKit.FormAction
  public let cancelAction: IdsvrHaapiUIKit.FormAction?
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let pollingProperties: IdsvrHaapiUIKit.PollingProperties
  public let rawJsonString: Swift.String?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public var properties: (any IdsvrHaapiUIKit.Properties)? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.PollingStep, rhs: IdsvrHaapiUIKit.PollingStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationResponseStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let oauthAuthorizationResponseProperties: IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public var properties: (any IdsvrHaapiUIKit.Properties)? {
    get
  }
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.OAuthAuthorizationResponseStep, rhs: IdsvrHaapiUIKit.OAuthAuthorizationResponseStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct ContinueSameStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.ContinueSameStep, rhs: IdsvrHaapiUIKit.ContinueSameStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct UserConsentStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let links: [IdsvrHaapiUIKit.Link]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.UserConsentStep, rhs: IdsvrHaapiUIKit.UserConsentStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct ExternalBrowserClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.ExternalBrowserClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.ExternalBrowserClientOperationStep, rhs: IdsvrHaapiUIKit.ExternalBrowserClientOperationStep) -> Swift.Bool
  public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  public func formattedParametersFromURL(_ url: Foundation.URL) throws -> [Swift.String : Swift.String]
  public var actionsToPresent: [IdsvrHaapiUIKit.Action] {
    get
  }
  public var continueFormActionModel: IdsvrHaapiUIKit.FormActionModel {
    get
  }
}
@available(iOS 14.0, *)
public struct BankIdClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let activationLink: IdsvrHaapiUIKit.Link?
  public let actionModel: IdsvrHaapiUIKit.BankIdClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.BankIdClientOperationStep, rhs: IdsvrHaapiUIKit.BankIdClientOperationStep) -> Swift.Bool
  public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  public var continueActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  public var errorActions: [IdsvrHaapiUIKit.Action] {
    get
  }
}
@available(iOS 14.0, *)
public struct EncapClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.EncapAutoActivationClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.EncapClientOperationStep, rhs: IdsvrHaapiUIKit.EncapClientOperationStep) -> Swift.Bool
  public var urlToLaunch: Foundation.URL? {
    get
  }
  public var continueActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  public var errorActions: [IdsvrHaapiUIKit.Action] {
    get
  }
}
@available(iOS 14.0, *)
public struct WebAuthnRegistrationClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let rawJsonString: Swift.String?
  public let continueAction: IdsvrHaapiUIKit.FormAction
  public var fallbackActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationStep, rhs: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationStep) -> Swift.Bool
  public func formattedParametersForRegistration(credentialOptions: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions, attestationObject: Foundation.Data, rawClientDataJSON: Foundation.Data, credentialID: Foundation.Data, credentialParamType: Swift.String = "public-key") -> [Swift.String : Any]
}
@available(iOS 14.0, *)
public struct WebAuthnAuthenticationClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let continueAction: IdsvrHaapiUIKit.FormAction
  public var fallbackActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationStep, rhs: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationStep) -> Swift.Bool
  public func formattedParametersForAssertion(rawAuthenticatorData: Foundation.Data, rawClientDataJSON: Foundation.Data, signature: Foundation.Data, credentialID: Foundation.Data, credentialParamType: Swift.String = "public-key", userId: Foundation.Data? = nil) -> [Swift.String : Any]
}
@available(iOS 14.0, *)
public struct GenericClientOperationStep : IdsvrHaapiUIKit.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiUIKit.GenericClientOperationActionModel
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.GenericClientOperationStep, rhs: IdsvrHaapiUIKit.GenericClientOperationStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct GenericRepresentationStep : IdsvrHaapiUIKit.HaapiRepresentation, Swift.Equatable {
  public let properties: (any IdsvrHaapiUIKit.Properties)?
  public let actions: [IdsvrHaapiUIKit.Action]
  public let links: [IdsvrHaapiUIKit.Link]
  public let messages: [IdsvrHaapiUIKit.UserMessage]
  public let type: IdsvrHaapiUIKit.RepresentationType
  public let metadata: IdsvrHaapiUIKit.Metadata?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.GenericRepresentationStep, rhs: IdsvrHaapiUIKit.GenericRepresentationStep) -> Swift.Bool
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiFlow {
  public static func start(_ haapiFlowResult: any IdsvrHaapiUIKit.HaapiFlowResult, haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, haapiDeepLinkManageable: (any IdsvrHaapiUIKit.HaapiDeepLinkManageable)?, nibName nibNameOrNil: Swift.String? = "HaapiFlowViewController", bundle nibBundleOrNil: Foundation.Bundle? = Bundle(for: HaapiFlowViewController.self), notificationCenter: Foundation.NotificationCenter = NotificationCenter.default) -> some SwiftUICore.View
  
}
@available(iOS, introduced: 14.0, deprecated: 16.0, message: "Cannot be used in iOS 17. Use `HaapiFlowViewControllerRepresentable` instead.")
@_Concurrency.MainActor @preconcurrency public struct HaapiFlowVCRepresentable : SwiftUI.UIViewControllerRepresentable {
  @available(*, deprecated, message: "Use `HaapiFlowViewControllerRepresentable` instead. ")
  @_Concurrency.MainActor @preconcurrency public init(contentViewController: IdsvrHaapiUIKit.HaapiFlowViewController, presentationMode: IdsvrHaapiUIKit.PresentationMode)
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: IdsvrHaapiUIKit.HaapiFlowVCRepresentable.Context) -> some UIKit.UIViewController
  
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: @_opaqueReturnTypeOf("$s15IdsvrHaapiUIKit0B19FlowVCRepresentableV20makeUIViewController7contextQr7SwiftUI0gH20RepresentableContextVyACG_tF", 0) __, context: IdsvrHaapiUIKit.HaapiFlowVCRepresentable.Context)
  @available(iOS, introduced: 14.0, deprecated: 16.0, message: "Cannot be used in iOS 17. Use `HaapiFlowViewControllerRepresentable` instead.")
  public typealias Body = Swift.Never
  @available(iOS, introduced: 14.0, deprecated: 16.0, message: "Cannot be used in iOS 17. Use `HaapiFlowViewControllerRepresentable` instead.")
  public typealias Coordinator = Swift.Void
  @available(iOS, introduced: 14.0, deprecated: 16.0, message: "Cannot be used in iOS 17. Use `HaapiFlowViewControllerRepresentable` instead.")
  public typealias UIViewControllerType = @_opaqueReturnTypeOf("$s15IdsvrHaapiUIKit0B19FlowVCRepresentableV20makeUIViewController7contextQr7SwiftUI0gH20RepresentableContextVyACG_tF", 0) __
}
@available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency public struct HaapiFlowViewControllerRepresentable : SwiftUI.UIViewControllerRepresentable {
  public typealias UIViewControllerType = UIKit.UIViewController
  @_Concurrency.MainActor @preconcurrency public init(haapiFlowResult: any IdsvrHaapiUIKit.HaapiFlowResult, haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, haapiDeepLinkManageable: (any IdsvrHaapiUIKit.HaapiDeepLinkManageable)?, nibName: Swift.String?, bundle: Foundation.Bundle?, notificationCenter: Foundation.NotificationCenter = NotificationCenter.default)
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: IdsvrHaapiUIKit.HaapiFlowViewControllerRepresentable.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: IdsvrHaapiUIKit.HaapiFlowViewControllerRepresentable.Context)
  @available(iOS 14.0, *)
  public typealias Body = Swift.Never
  @available(iOS 14.0, *)
  public typealias Coordinator = Swift.Void
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency open class WebAuthnViewController : IdsvrHaapiUIKit.BaseViewController<any IdsvrHaapiUIKit.WebAuthnOperationModel, IdsvrHaapiUIKit.WebAuthnViewControllerStyle> {
  @_Concurrency.MainActor @preconcurrency override public init(_ model: any IdsvrHaapiUIKit.WebAuthnOperationModel, style: IdsvrHaapiUIKit.WebAuthnViewControllerStyle, commonStyle: IdsvrHaapiUIKit.HaapiUIViewControllerStyle)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency required public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency override public func handleProblemModel(_ problemModel: any IdsvrHaapiUIKit.ProblemModel) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func handleFormModel(_ formModel: any IdsvrHaapiUIKit.FormModel) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func stopLoading()
  @_Concurrency.MainActor @preconcurrency override public func hasLoading() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func apply(style: IdsvrHaapiUIKit.WebAuthnViewControllerStyle)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.WebAuthnViewController : AuthenticationServices.ASAuthorizationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func authorizationController(controller: AuthenticationServices.ASAuthorizationController, didCompleteWithError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func authorizationController(controller: AuthenticationServices.ASAuthorizationController, didCompleteWithAuthorization authorization: AuthenticationServices.ASAuthorization)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.WebAuthnViewController : AuthenticationServices.ASAuthorizationControllerPresentationContextProviding {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentationAnchor(for controller: AuthenticationServices.ASAuthorizationController) -> AuthenticationServices.ASPresentationAnchor
}
@available(iOS 14.0, *)
public protocol HaapiUIViewController : UIKit.UIViewController {
  associatedtype AssociatedModel = any IdsvrHaapiUIKit.UIModel
  associatedtype AssociatedStyle = IdsvrHaapiUIKit.UIStyle
  var haapiFlowViewControllerDelegate: (any IdsvrHaapiUIKit.HaapiFlowViewControllerDelegate)? { get set }
  var uiStylableThemeDelegate: (any IdsvrHaapiUIKit.UIStylableThemeDelegate)? { get set }
  func stopLoading()
  func hasLoading() -> Swift.Bool
  func handleProblemModel(_ problemModel: any IdsvrHaapiUIKit.ProblemModel) -> Swift.Bool
  func handleInfoMessageModels(_ infoMessageModels: [any IdsvrHaapiUIKit.InfoMessageModel])
  func handleLinkItemModels(_ linkItemModels: [any IdsvrHaapiUIKit.LinkItemModel])
  func handleFormModel(_ formModel: any IdsvrHaapiUIKit.FormModel) -> Swift.Bool
  func preSubmit(interactionActionModel: any IdsvrHaapiUIKit.InteractionActionModel, parameters: [Swift.String : Any], closure: @escaping (Swift.Bool, [Swift.String : Any]) -> Swift.Void)
  func preSelect(selectorItemModel: any IdsvrHaapiUIKit.SelectorItemInteractionActionModel, closure: @escaping (Swift.Bool) -> Swift.Void)
  func preFollow(linkItemModel: any IdsvrHaapiUIKit.LinkItemModel, closure: @escaping (Swift.Bool) -> Swift.Void)
}
@objc @available(iOS 14.0, *)
final public class HaapiFlowViewModel : ObjectiveC.NSObject, Combine.ObservableObject {
  convenience public init(haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication) throws
  public init(haapiUIKitConfiguration: IdsvrHaapiUIKit.HaapiUIKitConfiguration, dataMapper: any IdsvrHaapiUIKit.DataMapper, oAuthDataMapper: any IdsvrHaapiUIKit.OAuthDataMapper = OAuthDataMapperBuilder().build()) throws
  @objc deinit
  final public func start()
  final public func submit(form: IdsvrHaapiUIKit.FormActionModel, parameters: [Swift.String : Any])
  final public func followLink(_ link: IdsvrHaapiUIKit.Link)
  final public func fetchAccessToken(authorizationCode: Swift.String, additionalParameters: [Swift.String : Swift.String]? = nil)
  final public func refreshAccessToken(refreshToken: Swift.String, additionalParameters: [Swift.String : Swift.String]? = nil)
  @available(iOS 14.0, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum ProblemFactory {
    public static func problem(type: IdsvrHaapiUIKit.ProblemType, metadata: IdsvrHaapiUIKit.Metadata?, title: IdsvrHaapiUIKit.Message?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.Problem
    public static func invalidInputField(name: Swift.String, reason: Swift.String?, detail: IdsvrHaapiUIKit.Message) -> IdsvrHaapiUIKit.InvalidInputProblem.InvalidField
    public static func invalidInput(invalidFields: [IdsvrHaapiUIKit.InvalidInputProblem.InvalidField], errorDescription: Swift.String?, type: IdsvrHaapiUIKit.ProblemType, metadata: IdsvrHaapiUIKit.Metadata?, title: IdsvrHaapiUIKit.Message?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.InvalidInputProblem
    public static func authorization(error: Swift.String, errorDescription: Swift.String?, type: IdsvrHaapiUIKit.ProblemType, metadata: IdsvrHaapiUIKit.Metadata?, title: IdsvrHaapiUIKit.Message?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.AuthorizationProblem
  }
}
@available(iOS 14.0, *)
public typealias HaapiUIViewControllerFactory<T, S, H> = (T, S, IdsvrHaapiUIKit.HaapiUIViewControllerStyle) throws -> H where T : IdsvrHaapiUIKit.UIModel, T == H.AssociatedModel, S : IdsvrHaapiUIKit.UIStyle, S == H.AssociatedStyle, H : IdsvrHaapiUIKit.HaapiUIViewController
public protocol HaapiUIKitApplication : AnyObject {
  @available(iOS 14.0, *)
  var haapiUIKitConfiguration: IdsvrHaapiUIKit.HaapiUIKitConfiguration { get }
  @available(iOS 14.0, *)
  var dataMapper: any IdsvrHaapiUIKit.DataMapper { get }
  @available(iOS 14.0, *)
  var oAuthDataMapper: any IdsvrHaapiUIKit.OAuthDataMapper { get }
  @available(iOS 14.0, *)
  var genericClientOperationHandler: any IdsvrHaapiUIKit.GenericClientOperationHandler { get }
}
@available(iOS 14.0, *)
public protocol GenericClientOperationHandler {
  func handleGenericClientOperation(actionModel: IdsvrHaapiUIKit.GenericClientOperationActionModel, viewControllerProvider: ((UIKit.UIViewController) -> Swift.Void)?, onSuccess: @escaping (any IdsvrHaapiUIKit.RepresentationActionModel, [Swift.String : Any]) -> Swift.Void, onError: @escaping () -> Swift.Void)
}
public protocol HaapiDeepLinkManageable {
  func registerHaapiFlowDeeplinkable(_ haapiFlowDeepLinkable: any IdsvrHaapiUIKit.HaapiFlowDeepLinkable)
  @discardableResult
  func unregisterHaapiFlowDeeplinkable(_ haapiFlowDeepLinkable: any IdsvrHaapiUIKit.HaapiFlowDeepLinkable) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class HaapiDeepLinkManager : IdsvrHaapiUIKit.HaapiDeepLinkManageable, IdsvrHaapiUIKit.HaapiFlowDeepLinkable {
  public static let shared: IdsvrHaapiUIKit.HaapiDeepLinkManager
  public func registerHaapiFlowDeeplinkable(_ haapiFlowDeepLinkable: any IdsvrHaapiUIKit.HaapiFlowDeepLinkable)
  public func unregisterHaapiFlowDeeplinkable(_ haapiFlowDeepLinkable: any IdsvrHaapiUIKit.HaapiFlowDeepLinkable) -> Swift.Bool
  public func canHandleUrl(_ url: Foundation.URL) -> Swift.Bool
  public func handleUrl(_ url: Foundation.URL)
  @objc deinit
}
@available(iOS 14.0, *)
public class HaapiUIKitApplicationBuilder {
  public init(haapiUIKitConfiguration: IdsvrHaapiUIKit.HaapiUIKitConfiguration)
  @discardableResult
  public func setThemingPlistFileName(_ plistFileName: Swift.String, and bundle: Foundation.Bundle = .main) -> IdsvrHaapiUIKit.HaapiUIKitApplicationBuilder
  @discardableResult
  public func setDataMapper(_ dataMapper: any IdsvrHaapiUIKit.DataMapper) -> IdsvrHaapiUIKit.HaapiUIKitApplicationBuilder
  @discardableResult
  public func setOAuthDataMapper(_ oAuthDataMapper: any IdsvrHaapiUIKit.OAuthDataMapper) -> IdsvrHaapiUIKit.HaapiUIKitApplicationBuilder
  @discardableResult
  public func setGenericClientOperationHandler(_ value: any IdsvrHaapiUIKit.GenericClientOperationHandler) -> IdsvrHaapiUIKit.HaapiUIKitApplicationBuilder
  @discardableResult
  public func setViewControllerFactoryRegistry(registry: IdsvrHaapiUIKit.ViewControllerFactoryRegistry) -> IdsvrHaapiUIKit.HaapiUIKitApplicationBuilder
  public func buildOrThrow() throws -> any IdsvrHaapiUIKit.HaapiUIKitApplication
  @available(*, deprecated, renamed: "buildOrThrow", message: "This function will be removed with the next major release. Use buildOrThrow instead.")
  public func build() -> any IdsvrHaapiUIKit.HaapiUIKitApplication
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class AuthorizationProblem : IdsvrHaapiUIKit.Problem {
  @objc final public let error: Swift.String
  @objc final public let errorDescription: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@available(iOS 14.0, *)
public typealias UIModelFactory = (any IdsvrHaapiUIKit.HaapiResponse) throws -> (any IdsvrHaapiUIKit.UIModel)
@available(iOS 14.0, *)
public typealias OAuthModelFactory = (any IdsvrHaapiUIKit.OAuthResponse) throws -> (any IdsvrHaapiUIKit.OAuthModel)
@available(iOS 14.0, *)
public class DataMapperBuilder {
  public init(redirectTo: Swift.String, autoPollingDuration: Foundation.TimeInterval, authSelectionPresentation: IdsvrHaapiUIKit.AuthenticatorSelectionPresentation)
  public func customize<T>(modelType: T.Type, handler: @escaping IdsvrHaapiUIKit.UIModelFactory) -> IdsvrHaapiUIKit.DataMapperBuilder where T : IdsvrHaapiUIKit.HaapiResponse
  public func build() -> any IdsvrHaapiUIKit.DataMapper
  @objc deinit
}
@available(iOS 14.0, *)
public protocol DataMapper {
  func mapHaapiResultToUIModel(haapiResult: IdsvrHaapiUIKit.HaapiResult) throws -> any IdsvrHaapiUIKit.UIModel
  func mapRepresentationActionModelToUIInteractionModel(representationActionModel: any IdsvrHaapiUIKit.RepresentationActionModel) throws -> any IdsvrHaapiUIKit.UIInteractionModel
  func mapHaapiRepresentationToInteraction(haapiRepresentation: any IdsvrHaapiUIKit.HaapiRepresentation) throws -> any IdsvrHaapiUIKit.UIInteractionModel
}
@available(iOS 14.0, *)
public class OAuthDataMapperBuilder {
  public init()
  public func customize<T>(modelType: T.Type, handler: @escaping IdsvrHaapiUIKit.OAuthModelFactory) -> IdsvrHaapiUIKit.OAuthDataMapperBuilder where T : IdsvrHaapiUIKit.OAuthResponse
  public func build() -> any IdsvrHaapiUIKit.OAuthDataMapper
  @objc deinit
}
@available(iOS 14.0, *)
public protocol OAuthDataMapper {
  func mapTokenResponseToOAuthModel(tokenResponse: IdsvrHaapiUIKit.TokenResponse) throws -> any IdsvrHaapiUIKit.OAuthModel
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class StackViewStyle : IdsvrHaapiUIKit.UIStyle {
  public init(spacing: Swift.Double, alignment: UIKit.UIStackView.Alignment, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class Metadata : ObjectiveC.NSObject, Swift.Codable {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PresentationMode {
  case modal
  case stack
  public static func == (a: IdsvrHaapiUIKit.PresentationMode, b: IdsvrHaapiUIKit.PresentationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuthenticatorSelectionPresentation {
  case list
  case tabs
  public static func == (a: IdsvrHaapiUIKit.AuthenticatorSelectionPresentation, b: IdsvrHaapiUIKit.AuthenticatorSelectionPresentation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class PollingViewControllerStyle : IdsvrHaapiUIKit.BaseViewControllerStyle {
  public init(contentStyle: IdsvrHaapiUIKit.StackViewStyle, loadingIndicatorViewStyle: IdsvrHaapiUIKit.LoadingIndicatorViewStyle, loadingIndicatorSideDimension: Swift.Double, headerTextAppearance: IdsvrHaapiUIKit.TextAppearance, headerTextColor: UIKit.UIColor, messagesStyle: IdsvrHaapiUIKit.StackViewStyle, linksStyle: IdsvrHaapiUIKit.StackViewStyle, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum TokenResponseFactory {
    public static func success(accessToken: Swift.String, tokenType: Swift.String?, scope: Swift.String?, expiresIn: Swift.Int, refreshToken: Swift.String?, idToken: Swift.String?) -> IdsvrHaapiUIKit.SuccessfulTokenResponse
    public static func error(error: Swift.String, errorDescription: Swift.String) -> IdsvrHaapiUIKit.ErrorTokenResponse
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum ActionFactory {
    public static func form(properties: IdsvrHaapiUIKit.FormAction.Properties?, model: IdsvrHaapiUIKit.FormActionModel, kind: IdsvrHaapiUIKit.ActionKind, title: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.FormAction
    public static func selector(properties: IdsvrHaapiUIKit.SelectorAction.Properties?, model: IdsvrHaapiUIKit.SelectorActionModel, kind: IdsvrHaapiUIKit.ActionKind, title: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.SelectorAction
    public static func clientOperation(properties: IdsvrHaapiUIKit.ClientOperationAction.Properties?, model: IdsvrHaapiUIKit.ClientOperationActionModel, kind: IdsvrHaapiUIKit.ActionKind, title: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.ClientOperationAction
  }
}
@available(iOS 14, *)
open class UIStyle : Swift.Decodable {
  public init(paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol RepresentationActionModel : Swift.Decodable, Swift.Encodable, Swift.Equatable {
}
@available(iOS 14.0, *)
public struct FormActionModel : IdsvrHaapiUIKit.RepresentationActionModel {
  public let actionTitle: IdsvrHaapiUIKit.Message?
  public let continueActions: [IdsvrHaapiUIKit.Action]
  public let errorActions: [IdsvrHaapiUIKit.Action]
  public let fields: [IdsvrHaapiUIKit.FormField]
  public let type: Swift.String
  public let method: Swift.String
  public let href: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.FormActionModel, rhs: IdsvrHaapiUIKit.FormActionModel) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct SelectorActionModel : IdsvrHaapiUIKit.RepresentationActionModel {
  public let options: [IdsvrHaapiUIKit.Action]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.SelectorActionModel, rhs: IdsvrHaapiUIKit.SelectorActionModel) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class ClientOperationActionModel : IdsvrHaapiUIKit.RepresentationActionModel {
  final public let name: IdsvrHaapiUIKit.ClientOperationName
  final public let arguments: [Swift.String : Any]
  final public let continueActions: [IdsvrHaapiUIKit.Action]
  final public let errorActions: [IdsvrHaapiUIKit.Action]
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.ClientOperationActionModel, rhs: IdsvrHaapiUIKit.ClientOperationActionModel) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ExternalBrowserClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class BankIdClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public let autoStartToken: Swift.String
  final public let redirect: Swift.String
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class EncapAutoActivationClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public let activationCode: Swift.String
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public var urlToLaunch: Foundation.URL? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class WebAuthnRegistrationClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public var platformOptions: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.PlatformCredentialRequestOptions?
  final public var crossPlatformOptions: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CrossPlatformCredentialRequestOptions?
  final public var fallbackActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @_hasMissingDesignatedInitializers public class CredentialRequestOptions {
    final public let relyingPartyId: Swift.String?
    final public let challengeData: Foundation.Data?
    final public let userIdData: Foundation.Data?
    final public let userName: Swift.String?
    final public let displayName: Swift.String?
    final public let userVerification: Swift.String?
    final public let attestation: Swift.String?
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PlatformCredentialRequestOptions : IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions {
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CrossPlatformCredentialRequestOptions : IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions {
    final public let publicKeyCredParams: [IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.CredentialParams]?
    final public let excludedCredentials: [IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel.ExcludedCredential]?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class CredentialParams {
    final public let algorithmId: Swift.Int
    final public let type: Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class ExcludedCredential {
    final public let credentialID: Foundation.Data
    final public let type: Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class WebAuthnAuthenticationClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  final public var credentialOptions: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel.CredentialRequestOptions
  final public var fallbackActions: [IdsvrHaapiUIKit.Action] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @_hasMissingDesignatedInitializers final public class CredentialRequestOptions {
    final public let relyingPartyId: Swift.String?
    final public let challengeData: Foundation.Data?
    final public let platformAllowCredentials: [IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel.AllowedCredential]?
    final public let crossPlatformAllowCredentials: [IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel.AllowedCredential]?
    final public let userVerificationPreference: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class AllowedCredential {
    final public let credentialID: Foundation.Data
    final public let type: Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class GenericClientOperationActionModel : IdsvrHaapiUIKit.ClientOperationActionModel {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency open class ProblemViewController : IdsvrHaapiUIKit.BaseViewController<any IdsvrHaapiUIKit.ProblemModel, IdsvrHaapiUIKit.ProblemViewControllerStyle> {
  @_Concurrency.MainActor @preconcurrency override public init(_ model: any IdsvrHaapiUIKit.ProblemModel, style: IdsvrHaapiUIKit.ProblemViewControllerStyle, commonStyle: IdsvrHaapiUIKit.HaapiUIViewControllerStyle)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency required public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency override public func hasLoading() -> Swift.Bool
}
@available(iOS 14.0, *)
public typealias HaapiCompletionHandler = (_ haapiResult: IdsvrHaapiUIKit.HaapiResult) -> Swift.Void
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class HaapiManager : ObjectiveC.NSObject {
  @objc convenience public init(haapiConfiguration: any IdsvrHaapiUIKit.HaapiConfigurable) throws
  @objc deinit
  @objc final public func close()
  @objc public static var isSupported: Swift.Bool {
    @objc get
  }
  final public func start(completionHandler: @escaping IdsvrHaapiUIKit.HaapiCompletionHandler)
  final public func start() async -> IdsvrHaapiUIKit.HaapiResult
  final public func submitForm(_ form: IdsvrHaapiUIKit.FormActionModel, parameters: [Swift.String : Any], completionHandler: @escaping IdsvrHaapiUIKit.HaapiCompletionHandler)
  final public func submitForm(_ form: IdsvrHaapiUIKit.FormActionModel, parameters: [Swift.String : Any]) async -> IdsvrHaapiUIKit.HaapiResult
  final public func followLink(_ link: IdsvrHaapiUIKit.Link, completionHandler: @escaping IdsvrHaapiUIKit.HaapiCompletionHandler)
  final public func followLink(_ link: IdsvrHaapiUIKit.Link) async -> IdsvrHaapiUIKit.HaapiResult
  @objc final public var dpop: IdsvrHaapiUIKit.Dpop? {
    @objc get
  }
}
@available(iOS 14.0, *)
@objc public protocol HaapiManagerAccessor {
}
@available(iOS 14.0, *)
@objc public protocol OAuthAccessor : IdsvrHaapiUIKit.HaapiManagerAccessor {
  @objc var oAuthTokenManager: IdsvrHaapiUIKit.OAuthTokenManager { get }
}
@available(iOS 14.0, *)
@objc public protocol HaapiAccessor : IdsvrHaapiUIKit.OAuthAccessor {
  @objc var haapiManager: IdsvrHaapiUIKit.HaapiManager { get }
  @objc func close()
}
@objc public enum HaapiAccessorOption : Swift.Int {
  case all
  case oauth
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @available(iOS 14.0, *)
@objcMembers final public class HaapiAccessorBuilder : ObjectiveC.NSObject {
  @objc public init(haapiConfiguration: IdsvrHaapiUIKit.HaapiConfiguration)
  @objc @discardableResult
  final public func setHaapiAccessorOption(option: IdsvrHaapiUIKit.HaapiAccessorOption) -> IdsvrHaapiUIKit.HaapiAccessorBuilder
  @objc @discardableResult
  final public func setDCRConfiguration(configuration: IdsvrHaapiUIKit.DCRConfiguration) -> IdsvrHaapiUIKit.HaapiAccessorBuilder
  @objc @discardableResult
  final public func setAttestationValidationRetryCount(maxRetries: Swift.Int) -> IdsvrHaapiUIKit.HaapiAccessorBuilder
  @objc @discardableResult
  final public func setAttestationValidationKeyName(keyName: Swift.String) -> IdsvrHaapiUIKit.HaapiAccessorBuilder
  final public func build<T>(shouldClearExistingDCRClient: Swift.Bool = false, completionHandler: @escaping (Swift.Result<T, IdsvrHaapiUIKit.HaapiError>) -> Swift.Void) where T : IdsvrHaapiUIKit.HaapiManagerAccessor
  final public func build<T>(shouldClearExistingDCRClient: Swift.Bool = false) async throws -> T where T : IdsvrHaapiUIKit.HaapiManagerAccessor
  @objc deinit
}
@available(*, unavailable)
@objc extension IdsvrHaapiUIKit.HaapiAccessorBuilder {
  @objc final public func build(shouldClearExistingDCRClient: Swift.Bool = false, completionHandler: @escaping ((any IdsvrHaapiUIKit.HaapiManagerAccessor)?, (any Swift.Error)?) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers public class HTTPURLResponseContent : ObjectiveC.NSObject {
  final public let data: Foundation.Data?
  final public let httpURLResponse: Foundation.HTTPURLResponse?
  public var dataAsDictionary: [Swift.String : Any] {
    get
    set
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ErrorHTTPURLResponseContent : IdsvrHaapiUIKit.HTTPURLResponseContent {
  final public let error: any Swift.Error
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum FormFieldFactory {
    public static func selectOption(label: IdsvrHaapiUIKit.Message, value: Swift.String, selected: Swift.Bool) -> IdsvrHaapiUIKit.SelectFormField.Option
    public static func select(options: [IdsvrHaapiUIKit.SelectFormField.Option], name: Swift.String, label: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.SelectFormField
    public static func checkbox(checked: Swift.Bool, readonly: Swift.Bool, name: Swift.String, value: Swift.String?, label: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.CheckboxFormField
    public static func password(name: Swift.String, value: Swift.String?, label: IdsvrHaapiUIKit.Message?, placeholder: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.PasswordFormField
    public static func username(name: Swift.String, value: Swift.String?, label: IdsvrHaapiUIKit.Message?, placeholder: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.UsernameFormField
    public static func text(kind: IdsvrHaapiUIKit.TextFormField.Kind?, name: Swift.String, value: Swift.String?, label: IdsvrHaapiUIKit.Message?, placeholder: IdsvrHaapiUIKit.Message?) -> IdsvrHaapiUIKit.TextFormField
    public static func context(name: Swift.String) -> IdsvrHaapiUIKit.ContextFormField
    public static func hidden(name: Swift.String, value: Swift.String) -> IdsvrHaapiUIKit.HiddenFormField
  }
}
@available(iOS 14, *)
public enum StorageError : Swift.Error {
  case writeError(cause: any Swift.Error)
  case readError(cause: any Swift.Error)
  case deleteError(cause: any Swift.Error)
}
@available(iOS 14, *)
extension IdsvrHaapiUIKit.StorageError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 14, *)
public protocol Storage {
  func read(key: Swift.String) throws -> Foundation.Data?
  func write(key: Swift.String, data: Foundation.Data) throws
  func delete(key: Swift.String) throws
}
@available(iOS 14, *)
extension Foundation.URLResponse {
  public func haapiSessionId() -> Swift.String?
  public func dpopNonce() -> Swift.String?
}
@available(iOS 14, *)
extension Foundation.URLRequest {
  public mutating func addAuthorizationHeader(headerValue: Swift.String)
  public mutating func addDpopHeader(headerValue: Swift.String)
  public mutating func addClientInfoHeader(headerValue: Swift.String)
  public mutating func addDpopAccessTokenHeaders(from dpopAccessTokenInfo: IdsvrHaapiUIKit.DpopAccessTokenInfo, httpMethod: Swift.String, url: Foundation.URL) throws
  public mutating func addHaapiMediaTypeAcceptHeader()
  public mutating func addHaapiSessionIdHeader(_ sessionId: Swift.String)
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
public class BaseViewControllerStyle : IdsvrHaapiUIKit.UIStyle {
  public init(headerTextAppearance: IdsvrHaapiUIKit.TextAppearance, headerTextColor: UIKit.UIColor, messagesStyle: IdsvrHaapiUIKit.StackViewStyle, linksStyle: IdsvrHaapiUIKit.StackViewStyle, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
public protocol OAuthResponse : Swift.Decodable, Swift.Encodable, Swift.Equatable {
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class SuccessfulTokenResponse : ObjectiveC.NSObject, IdsvrHaapiUIKit.OAuthResponse {
  @objc final public let accessToken: Swift.String
  @objc final public let tokenType: Swift.String?
  @objc final public let scope: Swift.String?
  @objc final public let expiresIn: Swift.Int
  @objc final public let refreshToken: Swift.String?
  @objc final public let idToken: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class ErrorTokenResponse : ObjectiveC.NSObject, IdsvrHaapiUIKit.OAuthResponse {
  @objc final public let error: Swift.String
  @objc final public let errorDescription: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  @objc override final public var debugDescription: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum ActionModelFactory {
    public static func form(actionTitle: IdsvrHaapiUIKit.Message?, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action], fields: [IdsvrHaapiUIKit.FormField], type: Swift.String?, method: Swift.String, href: Swift.String) -> IdsvrHaapiUIKit.FormActionModel
    public static func selector(options: [IdsvrHaapiUIKit.Action]) -> IdsvrHaapiUIKit.SelectorActionModel
    public static func clientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) -> IdsvrHaapiUIKit.ClientOperationActionModel
    public static func externalBrowserClientOperation(arguments: [Swift.String : Swift.String], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.ExternalBrowserClientOperationActionModel
    public static func bankIdClientOperation(arguments: [Swift.String : Swift.String], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.BankIdClientOperationActionModel
    public static func encapClientOperation(arguments: [Swift.String : Swift.String], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.EncapAutoActivationClientOperationActionModel
    public static func webAuthnRegistrationClientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel
    public static func webauthnAuthenticationClientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) throws -> IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel
    public static func genericClientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiUIKit.ClientOperationName, continueActions: [IdsvrHaapiUIKit.Action], errorActions: [IdsvrHaapiUIKit.Action]) -> IdsvrHaapiUIKit.GenericClientOperationActionModel
    public static func link(href: Swift.String, rel: Swift.String, title: IdsvrHaapiUIKit.Message?, type: Swift.String?) -> IdsvrHaapiUIKit.Link
  }
}
@objc public protocol ClientAuthenticationMethod {
}
@objc @_inheritsConvenienceInitializers final public class ClientAuthenticationMethodNone : ObjectiveC.NSObject, IdsvrHaapiUIKit.ClientAuthenticationMethod {
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class ClientAuthenticationMethodSecret : ObjectiveC.NSObject, IdsvrHaapiUIKit.ClientAuthenticationMethod {
  @objc public init(secret: Swift.String)
  @objc deinit
}
@objc @available(iOS 14.0, *)
final public class KeyPinning : ObjectiveC.NSObject {
  @objc public init(hostname: Swift.String, publicKeyHash: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ClientAuthenticationMethodMTLS : ObjectiveC.NSObject, IdsvrHaapiUIKit.ClientAuthenticationMethod {
  @objc convenience public init(pkcs12Filename: Swift.String, pkcs12Passphrase: Swift.String, serverPEMFilename: Swift.String, isValidatingHostname: Swift.Bool, bundle: Foundation.Bundle = Bundle.main) throws
  @objc convenience public init(pkcs12Filename: Swift.String, pkcs12Passphrase: Swift.String, serverKeyPinnings: [IdsvrHaapiUIKit.KeyPinning], bundle: Foundation.Bundle = Bundle.main) throws
  @objc deinit
}
@available(iOS 14.0, *)
@objc public enum JWTAsymmetricAlgorithm : Swift.Int {
  case rs256
  case rs384
  case rs512
  case ps256
  case ps384
  case ps512
  case es256
  case es384
  case es512
  public init?(rawValue: Swift.Int)
  @available(iOS 14.0, *)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @available(iOS 14.0, *)
final public class ClientAuthenticationMethodJWTAsymmetric : ObjectiveC.NSObject, IdsvrHaapiUIKit.ClientAuthenticationMethod {
  final public let signatureAlgorithm: IdsvrHaapiUIKit.JWTAsymmetricAlgorithm
  final public let privateKey: Security.SecKey
  @objc public init(pemFilename: Swift.String, signatureAlgorithm: IdsvrHaapiUIKit.JWTAsymmetricAlgorithm, bundle: Foundation.Bundle = Bundle.main) throws
  @objc deinit
}
@available(iOS 14.0, *)
@objc public enum JWTSymmetricAlgorithm : Swift.Int, Swift.CaseIterable {
  case hs256
  case hs384
  case hs512
  public init?(rawValue: Swift.Int)
  @available(iOS 14.0, *)
  public typealias AllCases = [IdsvrHaapiUIKit.JWTSymmetricAlgorithm]
  @available(iOS 14.0, *)
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [IdsvrHaapiUIKit.JWTSymmetricAlgorithm] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @available(iOS 14.0, *)
final public class ClientAuthenticationMethodJWTSymmetric : ObjectiveC.NSObject, IdsvrHaapiUIKit.ClientAuthenticationMethod {
  final public let signatureAlgorithm: IdsvrHaapiUIKit.JWTSymmetricAlgorithm
  final public let secretKey: Swift.String
  @objc public init(signatureAlgorithm: IdsvrHaapiUIKit.JWTSymmetricAlgorithm, secretKey: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class HaapiFlowViewControllerStyle : IdsvrHaapiUIKit.UIStyle {
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum PropertiesFactory {
    public static func generic(rawJsonString: Swift.String) -> IdsvrHaapiUIKit.GenericProperties
    public static func polling(rawJsonString: Swift.String, recipientOfCommunication: Swift.String?, status: IdsvrHaapiUIKit.PollingStatus) -> IdsvrHaapiUIKit.PollingProperties
    public static func oAuthAuthorizationResponse(rawJsonString: Swift.String, scope: Swift.String?, state: Swift.String?, code: Swift.String?, idToken: Swift.String?, rawJson: [Swift.String : Swift.String]) -> IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties
    public static func formAction(authenticatorType: Swift.String, rawJsonString: Swift.String) -> IdsvrHaapiUIKit.FormAction.Properties
    public static func selectorAction(rawJsonString: Swift.String) -> IdsvrHaapiUIKit.SelectorAction.Properties
    public static func clientOperation(rawJsonString: Swift.String) -> IdsvrHaapiUIKit.ClientOperationAction.Properties
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class TextAppearance : IdsvrHaapiUIKit.UIStyle {
  public init(textAlignment: UIKit.NSTextAlignment, fontTextStyle: UIKit.UIFont.TextStyle, lineHeightMultiple: Swift.Double, kern: Swift.Double, fontText: UIKit.UIFont, fontSymbolicTrait: UIKit.UIFontDescriptor.SymbolicTraits?, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class InvalidInputProblem : IdsvrHaapiUIKit.Problem {
  final public let invalidFields: [IdsvrHaapiUIKit.InvalidInputProblem.InvalidField]
  @objc final public let errorDescription: Swift.String?
  public struct InvalidField : Swift.Codable, Swift.Equatable {
    public let name: Swift.String
    public let reason: Swift.String?
    public let detail: IdsvrHaapiUIKit.Message
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public static func == (a: IdsvrHaapiUIKit.InvalidInputProblem.InvalidField, b: IdsvrHaapiUIKit.InvalidInputProblem.InvalidField) -> Swift.Bool
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@available(iOS 14, *)
public struct HaapiUIViewControllerStyle {
  public init(linkViewStyle: IdsvrHaapiUIKit.LinkViewStyle, messageViewStyles: IdsvrHaapiUIKit.HaapiUIViewControllerStyle.MessageViewStyles, loadingViewStyle: IdsvrHaapiUIKit.LoadingIndicatorViewStyle, inputTextFieldStyleName: Swift.String, inputTextFieldStyle: IdsvrHaapiUIKit.InputTextFieldStyle, textPickerViewStyle: IdsvrHaapiUIKit.TextPickerViewStyle, notificationBannerViewStyle: IdsvrHaapiUIKit.NotificationBannerViewStyle)
  public struct MessageViewStyles {
    public init(error: IdsvrHaapiUIKit.MessageViewStyle, warn: IdsvrHaapiUIKit.MessageViewStyle, info: IdsvrHaapiUIKit.MessageViewStyle, recipientOfCommunication: IdsvrHaapiUIKit.MessageViewStyle, content: IdsvrHaapiUIKit.MessageViewStyle, heading: IdsvrHaapiUIKit.MessageViewStyle, username: IdsvrHaapiUIKit.MessageViewStyle)
  }
}
@available(iOS 14, *)
public protocol UIStylableThemeDelegate : AnyObject {
  var commonStyle: IdsvrHaapiUIKit.HaapiUIViewControllerStyle { get }
  func imageOptional(named: Swift.String?) -> UIKit.UIImage?
  func styleOrThrowFor<U>(stylableType: any IdsvrHaapiUIKit.UIStylable.Type) throws -> U where U : IdsvrHaapiUIKit.UIStyle
  func styleFor<U>(stylableType: any IdsvrHaapiUIKit.UIStylable.Type) -> U where U : IdsvrHaapiUIKit.UIStyle
  func colorOptional(named: Swift.String?) -> UIKit.UIColor?
  func localizedStringForKey(key: Swift.String) -> Swift.String
}
public enum DriverFollowUpTag : Swift.String, IdsvrHaapiUIKit.FollowUpTag, Swift.CaseIterable {
  case flow
  case storage
  case http
  case attestation
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiUIKit.DriverFollowUpTag]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [IdsvrHaapiUIKit.DriverFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
extension UIKit.UIImage {
  public static func bundledImage(named name: Swift.String) -> UIKit.UIImage?
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class InputTextFieldStyle : IdsvrHaapiUIKit.UIStyle {
  public init(titleMinimumHeight: Swift.Double, titlePaddingLeft: Swift.Double, titlePaddingRight: Swift.Double, textFieldMinimumHeight: Swift.Double, textFieldContentPaddingLeft: Swift.Double, textFieldContentPaddingTop: Swift.Double, textFieldContentPaddingRight: Swift.Double, textFieldContentPaddingBottom: Swift.Double, iconPadding: Swift.Double, borderWidth: Swift.Double, cornerRadius: Swift.Double, titleTextAppearance: IdsvrHaapiUIKit.TextAppearance, titleColor: UIKit.UIColor, textFieldTextAppearance: IdsvrHaapiUIKit.TextAppearance, textFieldColor: UIKit.UIColor, errorColor: UIKit.UIColor, errorTextAppearance: IdsvrHaapiUIKit.TextAppearance, borderColor: UIKit.UIColor, titleBackgroundColor: UIKit.UIColor?, textFieldBackgroundColor: UIKit.UIColor?, textFieldPlaceholderColor: UIKit.UIColor?, textFieldShowPasswordImage: UIKit.UIImage?, textFieldHidePasswordImage: UIKit.UIImage?, textFieldPasswordImageTintColor: UIKit.UIColor?, errorImage: UIKit.UIImage?, tintColor: UIKit.UIColor?, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class MessageViewStyle : IdsvrHaapiUIKit.UIStyle {
  public init(iconTextPadding: Swift.Double, alignment: UIKit.UIStackView.Alignment, borderWidth: Swift.Double, cornerRadius: Swift.Double, textAppearance: IdsvrHaapiUIKit.TextAppearance, textColor: UIKit.UIColor, borderColor: UIKit.UIColor, image: UIKit.UIImage?, imageTintColor: UIKit.UIColor?, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@available(iOS 14.0, *)
public typealias HttpHeadersProvider = () -> [Swift.String : Swift.String]
@available(iOS 14.0, *)
public typealias OAuthAuthorizationParametersProvider = () -> IdsvrHaapiUIKit.OAuthAuthorizationParameters
@available(iOS 14.0, *)
@objc public protocol HaapiConfigurable {
  @objc var name: Swift.String { get }
  @objc var clientId: Swift.String { get }
  @objc var baseURL: Foundation.URL { get }
  @objc var tokenEndpointURL: Foundation.URL { get }
  @objc var authorizationEndpointURL: Foundation.URL { get }
  @objc var appRedirect: Swift.String { get }
  @objc var urlSession: Foundation.URLSession { get }
  @objc var isAutoRedirect: Swift.Bool { get }
  @objc var httpHeadersProvider: IdsvrHaapiUIKit.HttpHeadersProvider? { get }
  @objc var authorizationParametersProvider: IdsvrHaapiUIKit.OAuthAuthorizationParametersProvider? { get }
  @objc var minTokenTtl: Foundation.TimeInterval { get }
  @objc var attestationConfiguration: IdsvrHaapiUIKit.AttestationConfiguration { get }
  @objc var tokenBoundConfiguration: any IdsvrHaapiUIKit.TokenBoundConfiguration { get }
  @objc var clientAuthenticationMethod: any IdsvrHaapiUIKit.ClientAuthenticationMethod { get }
  @objc var applicationBundle: Foundation.Bundle? { get }
}
@objc @available(iOS 14.0, *)
@objcMembers final public class HaapiConfiguration : ObjectiveC.NSObject, IdsvrHaapiUIKit.HaapiConfigurable, IdsvrHaapiUIKit.OAuthTokenConfigurable {
  @objc final public let name: Swift.String
  @objc final public let clientId: Swift.String
  @objc final public let baseURL: Foundation.URL
  @objc final public let tokenEndpointURL: Foundation.URL
  @objc final public let authorizationEndpointURL: Foundation.URL
  @objc final public let appRedirect: Swift.String
  @objc final public let httpHeadersProvider: IdsvrHaapiUIKit.HttpHeadersProvider?
  @objc final public let isAutoRedirect: Swift.Bool
  @objc final public let urlSession: Foundation.URLSession
  @objc final public let revocationEndpointURL: Foundation.URL?
  @objc final public let authorizationParametersProvider: IdsvrHaapiUIKit.OAuthAuthorizationParametersProvider?
  @objc final public let minTokenTtl: Foundation.TimeInterval
  @objc final public let attestationConfiguration: IdsvrHaapiUIKit.AttestationConfiguration
  @objc final public let tokenBoundConfiguration: any IdsvrHaapiUIKit.TokenBoundConfiguration
  @objc final public let tokenEndpointResponseListener: (any IdsvrHaapiUIKit.OAuthTokenManager.TokenEndpointResponseListener)?
  @objc final public let clientAuthenticationMethod: any IdsvrHaapiUIKit.ClientAuthenticationMethod
  @objc final public let applicationBundle: Foundation.Bundle?
  @objc public init(name: Swift.String, clientId: Swift.String, baseURL: Foundation.URL, tokenEndpointURL: Foundation.URL, authorizationEndpointURL: Foundation.URL, appRedirect: Swift.String, httpHeadersProvider: IdsvrHaapiUIKit.HttpHeadersProvider?, authorizationParametersProvider: IdsvrHaapiUIKit.OAuthAuthorizationParametersProvider?, isAutoRedirect: Swift.Bool = true, urlSession: Foundation.URLSession = URLSession(configuration: .haapi), revocationEndpointURL: Foundation.URL? = nil, minTokenTtl: Foundation.TimeInterval = TimeInterval(floatLiteral: 10.0), attestationConfiguration: IdsvrHaapiUIKit.AttestationConfiguration = AttestationConfiguration(), tokenBoundConfiguration: any IdsvrHaapiUIKit.TokenBoundConfiguration = UnboundedTokenConfiguration(), tokenEndpointResponseListener: (any IdsvrHaapiUIKit.OAuthTokenManager.TokenEndpointResponseListener)? = nil, clientAuthenticationMethod: any IdsvrHaapiUIKit.ClientAuthenticationMethod = ClientAuthenticationMethodNone(), applicationBundle: Foundation.Bundle? = nil)
  @objc deinit
}
@available(iOS 14.0, *)
extension Foundation.URLSessionConfiguration {
  public static var haapi: Foundation.URLSessionConfiguration {
    get
  }
}
@objc @available(iOS 14.0, *)
final public class AttestationConfiguration : ObjectiveC.NSObject {
  @objc public init(useAttestation: Swift.Bool = true, attestationMaxRetries: Swift.Int = 3)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency open class SelectorViewController : IdsvrHaapiUIKit.BaseViewController<any IdsvrHaapiUIKit.SelectorModel, IdsvrHaapiUIKit.SelectorViewControllerStyle> {
  @_Concurrency.MainActor @preconcurrency override public init(_ model: any IdsvrHaapiUIKit.SelectorModel, style: IdsvrHaapiUIKit.SelectorViewControllerStyle, commonStyle: IdsvrHaapiUIKit.HaapiUIViewControllerStyle)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency required public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency override public func hasLoading() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func apply(style: IdsvrHaapiUIKit.SelectorViewControllerStyle)
}
@available(iOS 14.0, *)
@frozen public enum ProblemType : Swift.Codable, Swift.Equatable {
  case authenticationFailedProblem
  case invalidInputProblem
  case incorrectCredentialsProblem
  case errorAuthorizationResponseProblem
  case unexpectedProblem
  case tooManyAttemptsProblem
  case genericUserProblem
  case sessionAndAccessTokenMismatchProblem
  case other(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ProblemType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: IdsvrHaapiUIKit.ProblemType.RawValue)
  public var rawValue: IdsvrHaapiUIKit.ProblemType.RawValue {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class HaapiFlow {
  public static func start(from presentedViewController: any IdsvrHaapiUIKit.HaapiFlowResultViewController, haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, haapiDeepLinkManageable: (any IdsvrHaapiUIKit.HaapiDeepLinkManageable)?, animated: Swift.Bool = true, nibName nibNameOrNil: Swift.String? = "HaapiFlowViewController", bundle nibBundleOrNil: Foundation.Bundle? = Bundle(for: HaapiFlowViewController.self)) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class TextPickerViewStyle : IdsvrHaapiUIKit.UIStyle {
  public init(itemBackgroundColor: UIKit.UIColor, toolbarBackgroundColor: UIKit.UIColor, toolbarTextTintColor: UIKit.UIColor, textAppearance: IdsvrHaapiUIKit.TextAppearance, textColor: UIKit.UIColor, itemViewClassName: Swift.String?, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@available(iOS 14.0, *)
public class ViewControllerFactoryRegistry {
  public init()
  @discardableResult
  public func registerViewControllerFactory<T, S, H>(modelType: T.Type, factory: @escaping IdsvrHaapiUIKit.HaapiUIViewControllerFactory<T, S, H>) -> IdsvrHaapiUIKit.ViewControllerFactoryRegistry where T : IdsvrHaapiUIKit.UIModel, T == H.AssociatedModel, S : IdsvrHaapiUIKit.UIStyle, S == H.AssociatedStyle, H : IdsvrHaapiUIKit.HaapiUIViewController
  public func registerViewControllerFactoryFormModel(factory: @escaping (any IdsvrHaapiUIKit.FormModel, IdsvrHaapiUIKit.FormViewControllerStyle, IdsvrHaapiUIKit.HaapiUIViewControllerStyle) throws -> any IdsvrHaapiUIKit.HaapiUIViewController) -> IdsvrHaapiUIKit.ViewControllerFactoryRegistry
  public func registerViewControllerFactorySelectorModel(factory: @escaping (any IdsvrHaapiUIKit.SelectorModel, IdsvrHaapiUIKit.SelectorViewControllerStyle, IdsvrHaapiUIKit.HaapiUIViewControllerStyle) throws -> any IdsvrHaapiUIKit.HaapiUIViewController) -> IdsvrHaapiUIKit.ViewControllerFactoryRegistry
  public func registerViewControllerFactoryProblemModel(factory: @escaping (any IdsvrHaapiUIKit.ProblemModel, IdsvrHaapiUIKit.ProblemViewControllerStyle, IdsvrHaapiUIKit.HaapiUIViewControllerStyle) throws -> any IdsvrHaapiUIKit.HaapiUIViewController) -> IdsvrHaapiUIKit.ViewControllerFactoryRegistry
  public func registerViewControllerFactoryPollingModel(factory: @escaping (any IdsvrHaapiUIKit.PollingModel, IdsvrHaapiUIKit.PollingViewControllerStyle, IdsvrHaapiUIKit.HaapiUIViewControllerStyle) throws -> any IdsvrHaapiUIKit.HaapiUIViewController) -> IdsvrHaapiUIKit.ViewControllerFactoryRegistry
  public func registerViewControllerFactoryWebAuthnOperationModel(factory: @escaping (any IdsvrHaapiUIKit.WebAuthnOperationModel, IdsvrHaapiUIKit.WebAuthnViewControllerStyle, IdsvrHaapiUIKit.HaapiUIViewControllerStyle) throws -> any IdsvrHaapiUIKit.HaapiUIViewController) -> IdsvrHaapiUIKit.ViewControllerFactoryRegistry
  public func registerViewControllerFactoryGenericModel(factory: @escaping (any IdsvrHaapiUIKit.GenericModel, IdsvrHaapiUIKit.GenericViewControllerStyle, IdsvrHaapiUIKit.HaapiUIViewControllerStyle) throws -> any IdsvrHaapiUIKit.HaapiUIViewController) -> IdsvrHaapiUIKit.ViewControllerFactoryRegistry
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency open class PollingViewController : IdsvrHaapiUIKit.BaseViewController<any IdsvrHaapiUIKit.PollingModel, IdsvrHaapiUIKit.PollingViewControllerStyle> {
  @_Concurrency.MainActor @preconcurrency public init(_ model: any IdsvrHaapiUIKit.PollingModel, style: IdsvrHaapiUIKit.PollingViewControllerStyle, commonStyle: IdsvrHaapiUIKit.HaapiUIViewControllerStyle, notificationCenter: Foundation.NotificationCenter = NotificationCenter.default)
  @_Concurrency.MainActor @preconcurrency override convenience public init(_ model: any IdsvrHaapiUIKit.PollingModel, style: IdsvrHaapiUIKit.PollingViewControllerStyle, commonStyle: IdsvrHaapiUIKit.HaapiUIViewControllerStyle)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency required public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func update(model: any IdsvrHaapiUIKit.PollingModel)
  @_Concurrency.MainActor @preconcurrency override public func hasLoading() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func apply(style: IdsvrHaapiUIKit.PollingViewControllerStyle)
}
@available(iOS 14.0, *)
public struct Link : IdsvrHaapiUIKit.RepresentationActionModel {
  public let href: Swift.String
  public let rel: Swift.String
  public let title: IdsvrHaapiUIKit.Message?
  public let type: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: IdsvrHaapiUIKit.Link, b: IdsvrHaapiUIKit.Link) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class HaapiTokenResult : ObjectiveC.NSObject {
  @objc final public let dPopAccessTokenInfo: IdsvrHaapiUIKit.DpopAccessTokenInfo?
  @objc final public let error: (any Swift.Error)?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class FormField : Swift.Codable, Swift.Equatable {
  final public let name: Swift.String
  final public let label: IdsvrHaapiUIKit.Message?
  final public let placeholder: IdsvrHaapiUIKit.Message?
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.FormField, rhs: IdsvrHaapiUIKit.FormField) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class PasswordFormField : IdsvrHaapiUIKit.FormField {
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class UsernameFormField : IdsvrHaapiUIKit.FormField {
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class TextFormField : IdsvrHaapiUIKit.FormField {
  @frozen public enum Kind : Swift.RawRepresentable, Swift.Codable, Swift.Equatable {
    public typealias RawValue = Swift.String
    case number
    case email
    case url
    case tel
    case color
    case unknown(value: Swift.String)
    public init(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  final public let kind: IdsvrHaapiUIKit.TextFormField.Kind?
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class SelectFormField : IdsvrHaapiUIKit.FormField {
  final public let options: [IdsvrHaapiUIKit.SelectFormField.Option]
  final public let value: Swift.String?
  public struct Option : Swift.Codable, Swift.Equatable {
    public let label: IdsvrHaapiUIKit.Message
    public let value: Swift.String
    public let selected: Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public static func == (a: IdsvrHaapiUIKit.SelectFormField.Option, b: IdsvrHaapiUIKit.SelectFormField.Option) -> Swift.Bool
  }
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class CheckboxFormField : IdsvrHaapiUIKit.FormField {
  final public let checked: Swift.Bool
  final public let readonly: Swift.Bool
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ContextFormField : IdsvrHaapiUIKit.FormField {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class HiddenFormField : IdsvrHaapiUIKit.FormField {
  final public let value: Swift.String
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
public class KeychainStorage : IdsvrHaapiUIKit.Storage {
  public func write(key: Swift.String, data: Foundation.Data) throws
  public func read(key: Swift.String) throws -> Foundation.Data?
  public func delete(key: Swift.String) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class SelectorViewControllerStyle : IdsvrHaapiUIKit.BaseViewControllerStyle {
  public init(contentStyle: IdsvrHaapiUIKit.StackViewStyle, headerTextAppearance: IdsvrHaapiUIKit.TextAppearance, headerTextColor: UIKit.UIColor, messagesStyle: IdsvrHaapiUIKit.StackViewStyle, linksStyle: IdsvrHaapiUIKit.StackViewStyle, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@available(iOS 14.0, *)
public protocol Properties : Swift.Decodable, Swift.Encodable {
  var rawJsonString: Swift.String { get }
}
@available(iOS 14.0, *)
public struct GenericProperties : IdsvrHaapiUIKit.Properties, Swift.Equatable {
  public let rawJsonString: Swift.String
  public static func == (lhs: IdsvrHaapiUIKit.GenericProperties, rhs: IdsvrHaapiUIKit.GenericProperties) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationResponseProperties : IdsvrHaapiUIKit.Properties, Swift.Equatable {
  public let rawJsonString: Swift.String
  public let scope: Swift.String?
  public let state: Swift.String?
  public let code: Swift.String?
  public let idToken: Swift.String?
  public let rawJson: [Swift.String : Swift.String]
  public static func == (a: IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties, b: IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
public struct PollingProperties : IdsvrHaapiUIKit.Properties, Swift.Equatable {
  public let rawJsonString: Swift.String
  public let recipientOfCommunication: Swift.String?
  public let status: IdsvrHaapiUIKit.PollingStatus
  public static func == (a: IdsvrHaapiUIKit.PollingProperties, b: IdsvrHaapiUIKit.PollingProperties) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class NotificationBannerViewStyle : IdsvrHaapiUIKit.UIStyle {
  public init(actionTextAppearanceName: Swift.String, actionTextColorName: Swift.String, textAppearanceName: Swift.String, textColorName: Swift.String, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class AccessToken : ObjectiveC.NSObject {
  @objc final public let value: Swift.String
  @objc final public let expiresOn: Foundation.Date
  @objc public func isValid(atTime: Foundation.Date, minTtl: Foundation.TimeInterval) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class DpopAccessTokenInfo : ObjectiveC.NSObject {
  @objc final public let accessToken: IdsvrHaapiUIKit.AccessToken
  @objc final public let dpop: IdsvrHaapiUIKit.Dpop
  @objc final public let dpopNonce: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc public func dpopHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func authorizationHeaderValue() -> Swift.String
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency open class BaseViewController<AssociatedModel, AssociatedStyle> : UIKit.UIViewController, IdsvrHaapiUIKit.HaapiUIViewController, IdsvrHaapiUIKit.UIStylable where AssociatedStyle : IdsvrHaapiUIKit.BaseViewControllerStyle {
  @_Concurrency.MainActor @preconcurrency final public let model: AssociatedModel
  @_Concurrency.MainActor @preconcurrency weak public var mainView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var messagesStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var linksStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(_ model: AssociatedModel, style: AssociatedStyle, commonStyle: IdsvrHaapiUIKit.HaapiUIViewControllerStyle)
  @objc deinit
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency weak public var haapiFlowViewControllerDelegate: (any IdsvrHaapiUIKit.HaapiFlowViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency weak public var uiStylableThemeDelegate: (any IdsvrHaapiUIKit.UIStylableThemeDelegate)?
  @_Concurrency.MainActor @preconcurrency open func stopLoading()
  @_Concurrency.MainActor @preconcurrency open func hasLoading() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func handleProblemModel(_ problemModel: any IdsvrHaapiUIKit.ProblemModel) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func handleInfoMessageModels(_ infoMessageModels: [any IdsvrHaapiUIKit.InfoMessageModel])
  @_Concurrency.MainActor @preconcurrency open func handleLinkItemModels(_ linkItemModels: [any IdsvrHaapiUIKit.LinkItemModel])
  @_Concurrency.MainActor @preconcurrency open func handleFormModel(_ formModel: any IdsvrHaapiUIKit.FormModel) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func preSubmit(interactionActionModel: any IdsvrHaapiUIKit.InteractionActionModel, parameters: [Swift.String : Any], closure: @escaping (Swift.Bool, [Swift.String : Any]) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func preSelect(selectorItemModel: any IdsvrHaapiUIKit.SelectorItemInteractionActionModel, closure: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func preFollow(linkItemModel: any IdsvrHaapiUIKit.LinkItemModel, closure: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency open func preRender(uiModel: AssociatedModel)
  @_Concurrency.MainActor @preconcurrency public func apply(style: AssociatedStyle)
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func insertView(_ view: UIKit.UIView, aboveView: UIKit.UIView) -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func insertView(_ view: UIKit.UIView, belowView: UIKit.UIView) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct UserMessage : Swift.Codable, Swift.Equatable {
  public let text: IdsvrHaapiUIKit.Message
  public let classList: [Swift.String]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: IdsvrHaapiUIKit.UserMessage, b: IdsvrHaapiUIKit.UserMessage) -> Swift.Bool
}
@available(iOS 14.0, *)
@frozen public enum PollingStatus : Swift.Codable, Swift.Equatable {
  case pending
  case done
  case failed
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.PollingStatus : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiModel {
  public enum StepFactory {
    public static func authenticatorOption(title: IdsvrHaapiUIKit.Message, type: Swift.String?, action: IdsvrHaapiUIKit.FormAction) -> IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption
    public static func authenticatorSelector(title: IdsvrHaapiUIKit.Message, authenticators: [IdsvrHaapiUIKit.AuthenticatorSelectorStep.AuthenticatorOption], metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.AuthenticatorSelectorStep
    public static func interactiveForm(actions: [IdsvrHaapiUIKit.FormAction], type: IdsvrHaapiUIKit.RepresentationType, metadata: IdsvrHaapiUIKit.Metadata?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.InteractiveFormStep
    public static func redirection(redirectAction: IdsvrHaapiUIKit.FormAction, metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.RedirectionStep
    public static func polling(mainAction: IdsvrHaapiUIKit.FormAction, cancelAction: IdsvrHaapiUIKit.FormAction?, metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.PollingProperties, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.PollingStep
    public static func oAuthAuthorization(metadata: IdsvrHaapiUIKit.Metadata?, messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.OAuthAuthorizationResponseProperties, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.OAuthAuthorizationResponseStep
    public static func continueSame(metadata: IdsvrHaapiUIKit.Metadata?, messages: [IdsvrHaapiUIKit.UserMessage], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.ContinueSameStep
    public static func userConsent(metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.UserConsentStep
    public static func externalBrowserClientOperation(actionModel: IdsvrHaapiUIKit.ExternalBrowserClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.ExternalBrowserClientOperationStep
    public static func bankIdClientOperation(activationLink: IdsvrHaapiUIKit.Link?, actionModel: IdsvrHaapiUIKit.BankIdClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.BankIdClientOperationStep
    public static func encapClientOperation(actionModel: IdsvrHaapiUIKit.EncapAutoActivationClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.EncapClientOperationStep
    public static func webauthnRegistrationClientOperation(actionModel: IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) throws -> IdsvrHaapiUIKit.WebAuthnRegistrationClientOperationStep
    public static func webAuthnAuthenticationClientOperation(actionModel: IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) throws -> IdsvrHaapiUIKit.WebAuthnAuthenticationClientOperationStep
    public static func genericClientOperation(actionModel: IdsvrHaapiUIKit.GenericClientOperationActionModel, metadata: IdsvrHaapiUIKit.Metadata?, type: IdsvrHaapiUIKit.RepresentationType, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: IdsvrHaapiUIKit.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.GenericClientOperationStep
    public static func genericRepresentation(type: IdsvrHaapiUIKit.RepresentationType, metadata: IdsvrHaapiUIKit.Metadata?, actions: [IdsvrHaapiUIKit.Action], messages: [IdsvrHaapiUIKit.UserMessage], links: [IdsvrHaapiUIKit.Link], properties: (any IdsvrHaapiUIKit.Properties)?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiUIKit.GenericRepresentationStep
  }
}
public protocol RawJsonRepresentable {
  var rawJsonString: Swift.String? { get }
}
@available(iOS 14.0, *)
@frozen public enum HaapiResult {
  case representation(any IdsvrHaapiUIKit.HaapiRepresentation)
  case problem(any IdsvrHaapiUIKit.ProblemRepresentation)
  case error(any Swift.Error)
}
public protocol HaapiResponse : IdsvrHaapiUIKit.RawJsonRepresentable, Swift.Decodable, Swift.Encodable {
}
@available(iOS 14.0, *)
public protocol HaapiRepresentation : IdsvrHaapiUIKit.HaapiResponse {
  var metadata: IdsvrHaapiUIKit.Metadata? { get }
  var type: IdsvrHaapiUIKit.RepresentationType { get }
  var properties: (any IdsvrHaapiUIKit.Properties)? { get }
  var links: [IdsvrHaapiUIKit.Link] { get }
  var messages: [IdsvrHaapiUIKit.UserMessage] { get }
}
@available(iOS 14.0, *)
public protocol ProblemRepresentation : IdsvrHaapiUIKit.HaapiResponse {
  var metadata: IdsvrHaapiUIKit.Metadata? { get }
  var type: IdsvrHaapiUIKit.ProblemType { get }
  var title: IdsvrHaapiUIKit.Message? { get }
  var messages: [IdsvrHaapiUIKit.UserMessage] { get }
  var links: [IdsvrHaapiUIKit.Link] { get }
}
@available(iOS 14.0, *)
public protocol ClientOperationStep : IdsvrHaapiUIKit.HaapiRepresentation {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class GenericViewControllerStyle : IdsvrHaapiUIKit.BaseViewControllerStyle {
  override public init(headerTextAppearance: IdsvrHaapiUIKit.TextAppearance, headerTextColor: UIKit.UIColor, messagesStyle: IdsvrHaapiUIKit.StackViewStyle, linksStyle: IdsvrHaapiUIKit.StackViewStyle, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@available(iOS 14.0, *)
public struct HaapiUIKitConfiguration {
}
@available(iOS 14.0, *)
public class HaapiUIKitConfigurationBuilder {
  public init(clientId: Swift.String, baseUrl: Foundation.URL, tokenEndpointUrl: Foundation.URL, authorizationEndpointUrl: Foundation.URL, appRedirect: Swift.String)
  @discardableResult
  public func setAutoPollingDuration(duration: Foundation.TimeInterval) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setPresentationMode(mode: IdsvrHaapiUIKit.PresentationMode) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setAuthenticationSelectionPresentation(presentation: IdsvrHaapiUIKit.AuthenticatorSelectionPresentation) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setShouldAutoHandleFlowErrorFeedback(value: Swift.Bool) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setShouldConfirmInterruptionFlow(value: Swift.Bool) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setUseDefaultExternalBrowser(value: Swift.Bool) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setKeyStoreAlias(alias: Swift.String) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setOauthAuthorizationParamsProvider(provider: @escaping IdsvrHaapiUIKit.OAuthAuthorizationParametersProvider) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setHttpHeadersProvider(provider: @escaping IdsvrHaapiUIKit.HttpHeadersProvider) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setIsAutoRedirect(value: Swift.Bool) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setURLSession(session: Foundation.URLSession) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setApplicationBundle(_ bundle: Foundation.Bundle) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setMinTokenTtl(value: Foundation.TimeInterval) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setRevocationEndpointUrl(endpoint: Foundation.URL) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setDCRConfiguration(configuration: IdsvrHaapiUIKit.DCRConfiguration) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setShouldClearExistingDCRClient(value: Swift.Bool) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setClientAuthenticationMethod(method: any IdsvrHaapiUIKit.ClientAuthenticationMethod) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setTokenBoundConfiguration(configuration: any IdsvrHaapiUIKit.TokenBoundConfiguration) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  @discardableResult
  public func setAttestationConfiguration(configuration: IdsvrHaapiUIKit.AttestationConfiguration) -> IdsvrHaapiUIKit.HaapiUIKitConfigurationBuilder
  public func build() -> IdsvrHaapiUIKit.HaapiUIKitConfiguration
  @objc deinit
}
public enum SdkFollowUpTag : Swift.String, IdsvrHaapiUIKit.FollowUpTag, Swift.CaseIterable {
  case flow
  case http
  case mapping
  case oAuth
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiUIKit.SdkFollowUpTag]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [IdsvrHaapiUIKit.SdkFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum CryptoKeyType : Swift.Int, Swift.RawRepresentable {
  case p256
  case secureEnclave
  case security
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@objc public protocol TokenBoundConfiguration {
  @objc var keyPairType: IdsvrHaapiUIKit.CryptoKeyType { get }
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@objc final public class UnboundedTokenConfiguration : ObjectiveC.NSObject, IdsvrHaapiUIKit.TokenBoundConfiguration {
  @objc final public var keyPairType: IdsvrHaapiUIKit.CryptoKeyType
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 14.0, *)
@objc final public class BoundedTokenConfiguration : ObjectiveC.NSObject, IdsvrHaapiUIKit.TokenBoundConfiguration {
  @objc final public let keyPairType: IdsvrHaapiUIKit.CryptoKeyType
  @objc public init(keyPairType: IdsvrHaapiUIKit.CryptoKeyType = .secureEnclave)
  @objc deinit
}
@available(iOS 14.0, *)
public typealias OAuthLifecycleResultListener = IdsvrHaapiUIKit.HaapiFlowResult
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class OAuthLifecycle {
  public static func refreshToken(refreshToken: Swift.String, haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, lifecycleResultListener: any IdsvrHaapiUIKit.HaapiFlowResult, additionalParameters: [Swift.String : Swift.String]? = nil)
  @objc deinit
}
@available(iOS 14.0, *)
@frozen public enum ClientOperationName : Swift.Codable, Swift.Equatable {
  case externalBrowser
  case bankId
  case encapAutoActivation
  case webAuthnRegistration
  case webAuthnAuthentication
  case unknown(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ClientOperationName : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @available(iOS 14.0, *)
@objcMembers public class HaapiTokenManagerBuilder : ObjectiveC.NSObject {
  @objc public init(tokenEndpoint: Foundation.URL, clientId: Swift.String)
  @objc @discardableResult
  public func setName(_ name: Swift.String) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setInternalUrlSession(_ urlSession: Foundation.URLSession) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setHaapiTokenMinTtl(_ minTtl: Foundation.TimeInterval) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func disableDeviceCheckAttestation() -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setAttestationMaxRetryCount(maxRetries: Swift.Int) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setTokenBoundConfiguration(config: any IdsvrHaapiUIKit.TokenBoundConfiguration) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setClientAuthenticationMethod(method: any IdsvrHaapiUIKit.ClientAuthenticationMethod) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setApplicationBundle(_ bundle: Foundation.Bundle?) -> IdsvrHaapiUIKit.HaapiTokenManagerBuilder
  @objc public func build() throws -> IdsvrHaapiUIKit.HaapiTokenManager
  @objc deinit
}
@available(iOS 14.0, *)
public typealias OAuthCompletion = (_ tokenResponse: IdsvrHaapiUIKit.TokenResponse) -> Swift.Void
@available(iOS 14.0, *)
public typealias OAuthRevocationCompletion = (_ response: IdsvrHaapiUIKit.TokenRevocationResponse) -> Swift.Void
@available(iOS 14.0, *)
@frozen public enum TokenResponse {
  case successfulToken(IdsvrHaapiUIKit.SuccessfulTokenResponse)
  case errorToken(IdsvrHaapiUIKit.ErrorTokenResponse)
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
@frozen public enum TokenRevocationResponse {
  case success
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
@objc public protocol OAuthTokenConfigurable {
  @objc var clientId: Swift.String { get }
  @objc var tokenEndpointURL: Foundation.URL { get }
  @objc var appRedirect: Swift.String { get }
  @objc var urlSession: Foundation.URLSession { get }
  @objc var revocationEndpointURL: Foundation.URL? { get }
  @objc var tokenBoundConfiguration: any IdsvrHaapiUIKit.TokenBoundConfiguration { get }
  @objc var tokenEndpointResponseListener: (any IdsvrHaapiUIKit.OAuthTokenManager.TokenEndpointResponseListener)? { get }
  @objc var clientAuthenticationMethod: any IdsvrHaapiUIKit.ClientAuthenticationMethod { get }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class OAuthTokenManager : ObjectiveC.NSObject {
  @objc final public let oauthTokenConfiguration: any IdsvrHaapiUIKit.OAuthTokenConfigurable
  @objc convenience public init(oauthTokenConfiguration: any IdsvrHaapiUIKit.OAuthTokenConfigurable)
  final public func fetchAccessToken(with authorizationCode: Swift.String, dpop: IdsvrHaapiUIKit.Dpop? = nil, additionalParameters: [Swift.String : Swift.String]? = nil, completionHandler: @escaping IdsvrHaapiUIKit.OAuthCompletion)
  final public func refreshAccessToken(with refreshToken: Swift.String, additionalParameters: [Swift.String : Swift.String]? = nil, completionHandler: @escaping IdsvrHaapiUIKit.OAuthCompletion)
  final public func revokeAccessToken(with token: Swift.String, completionHandler: @escaping IdsvrHaapiUIKit.OAuthRevocationCompletion)
  final public func revokeRefreshToken(with token: Swift.String, completionHandler: @escaping IdsvrHaapiUIKit.OAuthRevocationCompletion)
  @objc public protocol TokenEndpointResponseListener {
    @objc func onSuccess(_ value: IdsvrHaapiUIKit.OAuthTokenManager.SuccessTokenHTTPURLResponseContent)
    @objc func onError(_ value: IdsvrHaapiUIKit.ErrorHTTPURLResponseContent)
    @objc func onTokenError(_ value: IdsvrHaapiUIKit.OAuthTokenManager.ErrorTokenHTTPURLResponseContent)
  }
  @objc @_hasMissingDesignatedInitializers public class SuccessTokenHTTPURLResponseContent : IdsvrHaapiUIKit.HTTPURLResponseContent {
    final public let successfulTokenResponse: IdsvrHaapiUIKit.SuccessfulTokenResponse
    @objc deinit
  }
  @objc @_hasMissingDesignatedInitializers public class ErrorTokenHTTPURLResponseContent : IdsvrHaapiUIKit.HTTPURLResponseContent {
    final public let errorTokenResponse: IdsvrHaapiUIKit.ErrorTokenResponse
    @objc deinit
  }
  @objc deinit
}
@available(*, unavailable)
@objc extension IdsvrHaapiUIKit.OAuthTokenManager {
  @objc final public func fetchAccessToken(with authorizationCode: Swift.String, dpop: IdsvrHaapiUIKit.Dpop? = nil, additionalParameters: [Swift.String : Swift.String]? = nil, completionHandler: @escaping (IdsvrHaapiUIKit.SuccessfulTokenResponse?, IdsvrHaapiUIKit.ErrorTokenResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func refreshAccessToken(with refreshToken: Swift.String, additionalParameters: [Swift.String : Swift.String]? = nil, completionHandler: @escaping (IdsvrHaapiUIKit.SuccessfulTokenResponse?, IdsvrHaapiUIKit.ErrorTokenResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func revokeRefreshToken(with token: Swift.String, completionHandler: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class ProblemViewControllerStyle : IdsvrHaapiUIKit.BaseViewControllerStyle {
  override public init(headerTextAppearance: IdsvrHaapiUIKit.TextAppearance, headerTextColor: UIKit.UIColor, messagesStyle: IdsvrHaapiUIKit.StackViewStyle, linksStyle: IdsvrHaapiUIKit.StackViewStyle, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Haapi : ObjectiveC.NSObject {
  @objc public static var isSupported: Swift.Bool {
    @objc get
  }
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class Dpop : ObjectiveC.NSObject, Swift.Codable {
  @objc public var jwkThumbprint: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc @available(swift, obsoleted: 0.1, message: "Use `createProof(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func createProof(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func createProof(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc @available(swift, obsoleted: 0.1, message: "Use `getHeaderValue(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc deinit
}
@available(iOS 14.0, *)
public protocol HaapiFlowViewControllerDelegate : UIKit.UIViewController {
  func submit(interactionActionModel: any IdsvrHaapiUIKit.InteractionActionModel, parameters: [Swift.String : Any])
  func select(selectorItemModel: any IdsvrHaapiUIKit.SelectorItemInteractionActionModel)
  func follow(linkItemModel: any IdsvrHaapiUIKit.LinkItemModel)
  func handleUIProblem(_ uiProblem: any IdsvrHaapiUIKit.UIProblemModel)
  func interruptHaapiFlowForError(_ error: any Swift.Error, title: Swift.String?, message: Swift.String?)
  func canOpenURL(_ url: Foundation.URL) -> Swift.Bool
  func openURL(_ url: Foundation.URL)
}
public protocol HaapiFlowDeepLinkable : AnyObject {
  func canHandleUrl(_ url: Foundation.URL) -> Swift.Bool
  func handleUrl(_ url: Foundation.URL)
}
@available(iOS 14.0, *)
public protocol HaapiFlowResultViewController : UIKit.UIViewController, IdsvrHaapiUIKit.HaapiFlowResult {
}
@available(iOS 14.0, *)
public protocol HaapiFlowResult {
  func didReceiveOAuthModel(_ oAuthModel: any IdsvrHaapiUIKit.OAuthModel)
  func didReceiveError(_ error: any Swift.Error)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency public class HaapiFlowViewController : UIKit.UIViewController, IdsvrHaapiUIKit.HaapiFlowViewControllerDelegate, IdsvrHaapiUIKit.UIStylable, IdsvrHaapiUIKit.HaapiFlowDeepLinkable {
  public typealias AssociatedStyle = IdsvrHaapiUIKit.HaapiFlowViewControllerStyle
  @_Concurrency.MainActor @preconcurrency convenience public init(haapiUIKitApplication: any IdsvrHaapiUIKit.HaapiUIKitApplication, haapiFlowResult: (any IdsvrHaapiUIKit.HaapiFlowResult)?, haapiDeepLinkManageable: (any IdsvrHaapiUIKit.HaapiDeepLinkManageable)?, nibName nibNameOrNil: Swift.String? = "HaapiFlowViewController", bundle nibBundleOrNil: Foundation.Bundle? = Bundle(for: HaapiFlowViewController.self), notificationCenter: Foundation.NotificationCenter = NotificationCenter.default) throws
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func submit(interactionActionModel: any IdsvrHaapiUIKit.InteractionActionModel, parameters: [Swift.String : Any])
  @_Concurrency.MainActor @preconcurrency public func select(selectorItemModel: any IdsvrHaapiUIKit.SelectorItemInteractionActionModel)
  @_Concurrency.MainActor @preconcurrency public func follow(linkItemModel: any IdsvrHaapiUIKit.LinkItemModel)
  @_Concurrency.MainActor @preconcurrency public func handleUIProblem(_ uiProblem: any IdsvrHaapiUIKit.UIProblemModel)
  @_Concurrency.MainActor @preconcurrency public func interruptHaapiFlowForError(_ error: any Swift.Error, title: Swift.String?, message: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func canOpenURL(_ url: Foundation.URL) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func openURL(_ url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func canHandleUrl(_ url: Foundation.URL) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func handleUrl(_ url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func apply(style: IdsvrHaapiUIKit.HaapiFlowViewControllerStyle)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiFlowViewController : AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiFlowViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentationControllerShouldDismiss(_ presentationController: UIKit.UIPresentationController) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentationControllerDidAttemptToDismiss(_ presentationController: UIKit.UIPresentationController)
}
@available(iOS 13.0, *)
extension Combine.Publisher where Self.Failure == Swift.Never {
  public func dropFirstAndSink(receiveValue: @escaping (Self.Output) -> Swift.Void) -> Combine.AnyCancellable
  public func dropFirstAndSinkOnMainThread(receiveValue: @escaping (Self.Output) -> Swift.Void) -> Combine.AnyCancellable
}
@available(iOS 14.0, *)
public enum HaapiModel {
  public enum ContentFactory {
    public static func metadata(templateArea: Swift.String?, viewName: Swift.String?) -> IdsvrHaapiUIKit.Metadata?
    public static func message(key: Swift.String?, literal: Swift.String) -> IdsvrHaapiUIKit.Message
    public static func userMessage(text: IdsvrHaapiUIKit.Message, classList: [Swift.String]) -> IdsvrHaapiUIKit.UserMessage
  }
}
public protocol Masking {
  var masked: Swift.String { get }
}
extension Swift.String : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension ObjectiveC.NSObject : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URL : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.Data : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.Dictionary : IdsvrHaapiUIKit.Masking where Key == Swift.String {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URLRequest : IdsvrHaapiUIKit.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.String {
  public static func optionalData(_ data: Foundation.Data?, encoding: Swift.String.Encoding = .utf8, fallback: Swift.String = "") -> Swift.String
  public var maskedPrefix: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.CryptoKeyType : Swift.Codable {
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class WebAuthnViewControllerStyle : IdsvrHaapiUIKit.BaseViewControllerStyle {
  @_hasMissingDesignatedInitializers public class TextualKeys {
    public init(otherTextualKeys: IdsvrHaapiUIKit.WebAuthnViewControllerStyle.TextualKeys)
    @objc deinit
  }
  @objc deinit
}
public protocol ViewLoadable : AnyObject {
  func startLoading()
  func stopLoading()
  var isLoading: Swift.Bool { get }
}
@objc @available(iOS 14.0, *)
@objcMembers final public class OAuthAuthorizationParameters : ObjectiveC.NSObject {
  @objc final public let scopes: [Swift.String]
  @objc final public let nonce: Swift.String?
  @objc final public let acrValues: [Swift.String]
  @objc final public let extraRequestParameters: [Swift.String : Swift.String]
  @objc public init(scopes: [Swift.String] = [], nonce: Swift.String? = nil, acrValues: [Swift.String] = [], extraRequestParameters: [Swift.String : Swift.String] = [:])
  @objc deinit
}
@available(iOS 14, *)
public enum HttpHeaderNames {
  public static let accept: Swift.String
  public static let authorization: Swift.String
  public static let contentType: Swift.String
  public static let dpop: Swift.String
  public static let haapiSessionId: Swift.String
  public static let haapiSetSessionId: Swift.String
  public static let dpopNonce: Swift.String
  public static let wwwAuthenticate: Swift.String
  public static let clientInfo: Swift.String
}
@available(iOS 14, *)
public enum MimeTypes : Swift.String {
  case happi
  case json
  case xWwwFormUrlEncoded
  public init?(rawValue: Swift.String)
  @available(iOS 14, *)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HaapiLogger : ObjectiveC.NSObject {
  public static var followUpTags: [any IdsvrHaapiUIKit.FollowUpTag] {
    get
    set
  }
  @objc public static var isDebugEnabled: Swift.Bool
  @objc public static var isInfoEnabled: Swift.Bool
  @objc public static var isWarningEnabled: Swift.Bool
  @objc public static var isErrorEnabled: Swift.Bool
  @objc public static var isSensitiveValueMasked: Swift.Bool
  public static func appendLogSink(_ logSink: any IdsvrHaapiUIKit.LogSink)
  @objc deinit
}
public enum LogType : Swift.String {
  case debug
  case error
  case info
  case warning
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol LogSink {
  func writeLog(logType: IdsvrHaapiUIKit.LogType, followUpTag: any IdsvrHaapiUIKit.FollowUpTag, message: Swift.String, file: Swift.String, line: Swift.Int)
}
@available(iOS 14.0, *)
public enum HaapiUIKitError : Swift.Error {
  case illegalState(_: Swift.String)
  case unsupportedMap(objName: Swift.String, expectedObjName: Swift.String)
  case unsupported(cause: Swift.String)
  case other(_: any Swift.Error)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiUIKitError : IdsvrHaapiUIKit.IdsvrError {
  public var failureReason: Swift.String {
    get
  }
  public var recoverySuggestion: IdsvrHaapiUIKit.IdsvrErrorHandling {
    get
  }
  public var cause: (any Swift.Error)? {
    get
  }
  public var error: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiUIKitError : Foundation.LocalizedError, Swift.Equatable {
  public static func == (lhs: IdsvrHaapiUIKit.HaapiUIKitError, rhs: IdsvrHaapiUIKit.HaapiUIKitError) -> Swift.Bool
  public var errorDescription: Swift.String? {
    get
  }
}
public enum CryptoImportError : Swift.Error, Swift.CustomDebugStringConvertible {
  case invalidPath(_: Swift.String)
  case invalidPEMString(_: Swift.String, cause: (any Swift.Error)?)
  case invalidPassphrase
  case invalidType(_: Swift.String)
  case outOfBounds
  case failedToImport(_: Swift.String)
  public var debugDescription: Swift.String {
    get
  }
}
public enum UIKitFollowUpTag : Swift.String, IdsvrHaapiUIKit.FollowUpTag, Swift.CaseIterable {
  case data
  case component
  case theming
  case flow
  case swiftUI
  case mapping
  case layout
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiUIKit.UIKitFollowUpTag]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [IdsvrHaapiUIKit.UIKitFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13.0, *)
extension Swift.StringProtocol {
  public var sha256Hex: Swift.String {
    get
  }
  public var dataUtf8Encoding: Foundation.Data {
    get
  }
  public var base64URLEncodedStringOfSHA256Hash: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var stringUtf8Encoding: Swift.String? {
    get
  }
}
@available(iOS 14.0, *)
@frozen public enum RepresentationType : Swift.Codable, Swift.Equatable {
  case authenticationStep
  case redirectionStep
  case registrationStep
  case pollingStep
  case continueSameStep
  case oauthAuthorizationResponse
  case consentorStep
  case userConsentStep
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.RepresentationType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
@frozen public enum ActionKind : Swift.Codable, Swift.Equatable {
  case cancel
  case deviceOption
  case login
  case `continue`
  case continueAutoLogin
  case deviceSelector
  case redirect
  case authenticatorSelector
  case selectAuthenticator
  case poll
  case form
  case bankIdSameDevice
  case bankIdOtherDevice
  case passwordReset
  case accountIdRecovery
  case userRegister
  case other(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ActionKind : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init(rawValue: IdsvrHaapiUIKit.ActionKind.RawValue)
  public var rawValue: Swift.String {
    get
  }
}
public enum RetryCondition {
  case now
  case whenAppInForeground
  public static func == (a: IdsvrHaapiUIKit.RetryCondition, b: IdsvrHaapiUIKit.RetryCondition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UnrecoverableAction : Swift.Equatable {
  case modifyConfiguration(reason: Swift.String)
  case introspectCause
  case invalidPlatform
  public static func == (a: IdsvrHaapiUIKit.UnrecoverableAction, b: IdsvrHaapiUIKit.UnrecoverableAction) -> Swift.Bool
}
public enum IdsvrErrorHandling {
  case retryable(condition: IdsvrHaapiUIKit.RetryCondition)
  case newHaapiFlow
  case unrecoverable(action: IdsvrHaapiUIKit.UnrecoverableAction)
}
public protocol IdsvrError : Swift.Error {
  var error: Swift.String { get }
  var errorDescription: Swift.String? { get }
  var failureReason: Swift.String { get }
  var recoverySuggestion: IdsvrHaapiUIKit.IdsvrErrorHandling { get }
  var cause: (any Swift.Error)? { get }
}
public enum TestingEnvironment : Swift.String {
  case componentName
  case componentDefinition
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TestingArgument : Swift.String {
  case uiTests
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency open class GenericViewController : IdsvrHaapiUIKit.BaseViewController<any IdsvrHaapiUIKit.GenericModel, IdsvrHaapiUIKit.GenericViewControllerStyle> {
  @_Concurrency.MainActor @preconcurrency override public init(_ model: any IdsvrHaapiUIKit.GenericModel, style: IdsvrHaapiUIKit.GenericViewControllerStyle, commonStyle: IdsvrHaapiUIKit.HaapiUIViewControllerStyle)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency required public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency override public func hasLoading() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func handleFormModel(_ formModel: any IdsvrHaapiUIKit.FormModel) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func stopLoading()
  @_Concurrency.MainActor @preconcurrency override public func handleProblemModel(_ problemModel: any IdsvrHaapiUIKit.ProblemModel) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func handleInfoMessageModels(_ infoMessageModels: [any IdsvrHaapiUIKit.InfoMessageModel])
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class Action : Swift.Codable, Swift.Equatable {
  final public let kind: IdsvrHaapiUIKit.ActionKind
  final public let title: IdsvrHaapiUIKit.Message?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiUIKit.Action, rhs: IdsvrHaapiUIKit.Action) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ClientOperationAction : IdsvrHaapiUIKit.Action {
  final public let model: IdsvrHaapiUIKit.ClientOperationActionModel
  final public let properties: IdsvrHaapiUIKit.ClientOperationAction.Properties?
  public struct Properties : Swift.Codable, Swift.Equatable {
    public let rawJsonString: Swift.String
    public static func == (lhs: IdsvrHaapiUIKit.ClientOperationAction.Properties, rhs: IdsvrHaapiUIKit.ClientOperationAction.Properties) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class FormAction : IdsvrHaapiUIKit.Action {
  final public let model: IdsvrHaapiUIKit.FormActionModel
  final public let properties: IdsvrHaapiUIKit.FormAction.Properties?
  public struct Properties : Swift.Codable, Swift.Equatable {
    public let authenticatorType: Swift.String
    public let rawJsonString: Swift.String
    public static func == (lhs: IdsvrHaapiUIKit.FormAction.Properties, rhs: IdsvrHaapiUIKit.FormAction.Properties) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class SelectorAction : IdsvrHaapiUIKit.Action {
  final public let model: IdsvrHaapiUIKit.SelectorActionModel
  final public let properties: IdsvrHaapiUIKit.SelectorAction.Properties?
  public struct Properties : Swift.Codable, Swift.Equatable {
    public let rawJsonString: Swift.String
    public static func == (lhs: IdsvrHaapiUIKit.SelectorAction.Properties, rhs: IdsvrHaapiUIKit.SelectorAction.Properties) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @available(iOS 14, *)
final public class DCRConfiguration : ObjectiveC.NSObject {
  @objc convenience public init(templateClientId: Swift.String, clientRegistrationEndpointUrl: Foundation.URL)
  public init(templateClientId: Swift.String, clientRegistrationEndpointUrl: Foundation.URL, storage: any IdsvrHaapiUIKit.Storage)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class LinkViewStyle : IdsvrHaapiUIKit.UIStyle {
  public init(alignment: UIKit.UIStackView.Alignment, loadingIndicatorSideDimension: Swift.Double, actionableButtonStyle: IdsvrHaapiUIKit.ActionableButtonStyle, loadingIndicatorViewStyle: IdsvrHaapiUIKit.LoadingIndicatorViewStyle, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@available(iOS 14, *)
public struct ResponseAndData {
  public let response: Foundation.URLResponse
  public let data: Foundation.Data?
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class HaapiClient : ObjectiveC.NSObject {
  public var dpop: IdsvrHaapiUIKit.Dpop? {
    get
  }
  public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Swift.Result<IdsvrHaapiUIKit.ResponseAndData, any Swift.Error>) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class HaapiTokenManager : ObjectiveC.NSObject {
  @objc final public var dpop: IdsvrHaapiUIKit.Dpop? {
    @objc get
  }
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiTokenManager {
  @objc @available(*, deprecated, renamed: "createClient()", message: "  This method doesn't work with the current API design for Dpop and Client Authentication\n  management and it will be removed on next major version.")
  final public func createClient(urlSession: Foundation.URLSession? = nil) -> IdsvrHaapiUIKit.HaapiClient
  @objc final public func createClient() -> IdsvrHaapiUIKit.HaapiClient
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiUIKit.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, completionHandler: @escaping (IdsvrHaapiUIKit.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiUIKit.DpopAccessTokenInfo, IdsvrHaapiUIKit.HaapiError>) -> Swift.Void)
  @objc final public func close()
  @objc final public func clearState()
  @available(*, unavailable, renamed: "getHaapiToken(forceFresh:dpopNonce:completionHandler:)", message: "Deprecated. Please use getHaapiToken(forceFresh:dpopNonce:completionHandler:)")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiUIKit.DpopAccessTokenInfo, IdsvrHaapiUIKit.HaapiError>) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (IdsvrHaapiUIKit.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiUIKit.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false) -> IdsvrHaapiUIKit.HaapiTokenResult?
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String?) -> IdsvrHaapiUIKit.HaapiTokenResult?
}
@available(iOS 14, *)
public protocol UIStylable {
  associatedtype AssociatedStyle : IdsvrHaapiUIKit.UIStyle
  func apply(style: Self.AssociatedStyle)
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class FormViewControllerStyle : IdsvrHaapiUIKit.BaseViewControllerStyle {
  public init(contentTextAppearance: IdsvrHaapiUIKit.TextAppearance, contentTextColor: UIKit.UIColor, contentStyle: IdsvrHaapiUIKit.StackViewStyle, headerTextAppearance: IdsvrHaapiUIKit.TextAppearance, headerTextColor: UIKit.UIColor, messagesStyle: IdsvrHaapiUIKit.StackViewStyle, linksStyle: IdsvrHaapiUIKit.StackViewStyle, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
public protocol UIModel : IdsvrHaapiUIKit.Masking, Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
}
extension IdsvrHaapiUIKit.UIModel {
  public var masked: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
public protocol UIOperationModel : IdsvrHaapiUIKit.UIModel {
  associatedtype InteractionModelType
  associatedtype ErrorInteractionModelType
  var url: Foundation.URL? { get }
  var interactionModel: Self.InteractionModelType? { get }
  var errorInteractionModel: Self.ErrorInteractionModelType? { get }
  var problem: any IdsvrHaapiUIKit.UIProblemModel { get }
}
public protocol UIProblemModel : IdsvrHaapiUIKit.UIModel {
  var title: Swift.String? { get }
  var message: Swift.String { get }
}
public protocol UIInteractionModel : IdsvrHaapiUIKit.UIModel {
  var templateArea: Swift.String? { get }
  var viewName: Swift.String? { get }
}
public protocol OAuthModel : IdsvrHaapiUIKit.UIModel {
}
public protocol OAuthErrorModel : IdsvrHaapiUIKit.OAuthModel {
  var error: Swift.String? { get }
  var errorDescription: Swift.String { get }
}
public protocol OAuthTokenModel : IdsvrHaapiUIKit.OAuthModel {
  var accessToken: Swift.String { get }
  var tokenType: Swift.String? { get }
  var scope: Swift.String? { get }
  var expiresIn: Swift.Int { get }
  var refreshToken: Swift.String? { get }
  var idToken: Swift.String? { get }
}
@available(iOS 14.0, *)
public protocol ContinueSameModel : IdsvrHaapiUIKit.UIInteractionModel {
  var messageItems: [any IdsvrHaapiUIKit.InfoMessageModel] { get }
  var formModel: (any IdsvrHaapiUIKit.FormModel)? { get }
}
@available(iOS 14.0, *)
public protocol GenericModel : IdsvrHaapiUIKit.UIInteractionModel {
  var formModel: (any IdsvrHaapiUIKit.FormModel)? { get }
  var selectorModel: (any IdsvrHaapiUIKit.SelectorModel)? { get }
}
@available(iOS 14.0, *)
public protocol FormModel : IdsvrHaapiUIKit.UIInteractionModel {
  var messageItems: [any IdsvrHaapiUIKit.InfoMessageModel] { get }
  var interactionItems: [any IdsvrHaapiUIKit.InteractionItemModel] { get }
  var linkItems: [any IdsvrHaapiUIKit.LinkItemModel] { get }
}
@available(iOS 14.0, *)
public protocol PollingModel : IdsvrHaapiUIKit.UIInteractionModel {
  var messageItems: [any IdsvrHaapiUIKit.InfoMessageModel] { get }
  var mainAction: any IdsvrHaapiUIKit.InteractionItemModel { get }
  var cancelAction: (any IdsvrHaapiUIKit.InteractionItemModel)? { get }
  var autoPollingDuration: Foundation.TimeInterval { get }
  @available(iOS 14.0, *)
  var status: IdsvrHaapiUIKit.PollingStatus { get }
  var linkItems: [any IdsvrHaapiUIKit.LinkItemModel] { get }
  func isEqualTo(_ other: any IdsvrHaapiUIKit.PollingModel) -> Swift.Bool
}
public protocol AuthorizationRequestModel : IdsvrHaapiUIKit.UIInteractionModel {
  var code: Swift.String { get }
}
@available(iOS 14.0, *)
public protocol ProblemModel : IdsvrHaapiUIKit.UIProblemModel {
  var messageItems: [any IdsvrHaapiUIKit.InfoMessageModel] { get }
  var linkItems: [any IdsvrHaapiUIKit.LinkItemModel] { get }
  @available(iOS 14.0, *)
  var type: IdsvrHaapiUIKit.HandleableProblemType? { get }
}
@available(iOS 14.0, *)
public protocol SelectorModel : IdsvrHaapiUIKit.UIInteractionModel {
  var title: Swift.String? { get }
  var messageItems: [any IdsvrHaapiUIKit.InfoMessageModel] { get }
  var selectorItems: [any IdsvrHaapiUIKit.SelectorItemModel] { get }
  var linkItems: [any IdsvrHaapiUIKit.LinkItemModel] { get }
}
@available(iOS 14.0, *)
public enum HandleableProblemType : Swift.String, Swift.Codable {
  case authenticationFailedProblem
  case invalidInputProblem
  case incorrectCredentialsProblem
  case sessionAndAccessTokenMismatchProblem
  case unhandleable
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  @available(iOS 14.0, *)
  public typealias RawValue = Swift.String
}
@available(iOS 14.0, *)
public protocol PollingOperationModel : IdsvrHaapiUIKit.UIOperationModel where Self.ErrorInteractionModelType == any IdsvrHaapiUIKit.FormModel, Self.InteractionModelType == any IdsvrHaapiUIKit.PollingModel {
}
@available(iOS 14.0, *)
public protocol FormOperationModel : IdsvrHaapiUIKit.UIOperationModel where Self.ErrorInteractionModelType == any IdsvrHaapiUIKit.UIInteractionModel, Self.InteractionModelType == any IdsvrHaapiUIKit.FormModel {
  var formActionModel: IdsvrHaapiUIKit.FormActionModel { get }
  var buildParameters: (Foundation.URL) throws -> [Swift.String : Any] { get }
}
@available(iOS 14.0, *)
public protocol GenericOperationModel : IdsvrHaapiUIKit.UIOperationModel where Self.ErrorInteractionModelType == any IdsvrHaapiUIKit.UIInteractionModel, Self.InteractionModelType == any IdsvrHaapiUIKit.FormModel {
  var actionModel: IdsvrHaapiUIKit.GenericClientOperationActionModel { get }
}
public protocol WebAuthnOperationParametersModel {
}
public protocol WebAuthnOperationModel : IdsvrHaapiUIKit.UIOperationModel {
  var actionModel: any IdsvrHaapiUIKit.RepresentationActionModel { get }
  var buildParametersWrapper: (any IdsvrHaapiUIKit.WebAuthnOperationParametersModel) -> [Swift.String : Any] { get }
}
@available(iOS 14.0, *)
public protocol InfoMessageModel : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  var key: Swift.String? { get }
  var reason: Swift.String? { get }
  var text: Swift.String? { get }
  var messageStyleAttribute: IdsvrHaapiUIKit.MessageStyleAttribute { get }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.InfoMessageModel {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
public enum MessageStyleAttribute : Swift.String, Swift.Codable {
  case heading
  case info
  case error
  case warn
  case recipientofcommunication
  case content
  case username
  public init?(rawValue: Swift.String)
  @available(iOS 14.0, *)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol InteractionErrorModel {
  var error: Swift.String? { get set }
}
public protocol InteractionItemModel : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  var key: Swift.String { get }
  var label: Swift.String { get }
}
extension IdsvrHaapiUIKit.InteractionItemModel {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
public protocol InteractionValueModel {
  var value: Swift.String { get set }
}
public protocol InteractionActionModel {
  var action: any IdsvrHaapiUIKit.RepresentationActionModel { get }
}
public protocol InteractionItemSectionModel : IdsvrHaapiUIKit.InteractionItemModel {
}
@available(iOS 14.0, *)
public protocol InteractionItemSelectModel : IdsvrHaapiUIKit.InteractionItemModel, IdsvrHaapiUIKit.InteractionValueModel {
  var action: IdsvrHaapiUIKit.Action? { get }
  var options: [(Swift.String, Swift.String)] { get }
  var selectedPosition: Swift.Int? { get set }
}
public enum InteractionItemButtonType : Swift.String {
  case primary
  case secondary
  case text
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol InteractionItemButtonModel : IdsvrHaapiUIKit.InteractionActionModel, IdsvrHaapiUIKit.InteractionItemModel {
  var type: IdsvrHaapiUIKit.InteractionItemButtonType { get }
  var imageResourceName: Swift.String? { get }
}
public protocol InteractionItemTextContentModel : IdsvrHaapiUIKit.InteractionItemModel {
}
public struct InputTextConfiguration : Swift.Equatable {
  public static func == (a: IdsvrHaapiUIKit.InputTextConfiguration, b: IdsvrHaapiUIKit.InputTextConfiguration) -> Swift.Bool
}
public protocol InteractionItemInputTextModel : IdsvrHaapiUIKit.InteractionErrorModel, IdsvrHaapiUIKit.InteractionItemModel, IdsvrHaapiUIKit.InteractionValueModel {
  var placeholder: Swift.String? { get }
  var inputConfiguration: IdsvrHaapiUIKit.InputTextConfiguration { get }
}
public protocol InteractionItemCheckboxModel : IdsvrHaapiUIKit.InteractionItemModel, IdsvrHaapiUIKit.InteractionValueModel {
  var isReadOnly: Swift.Bool { get }
  var isChecked: Swift.Bool { get set }
}
@available(iOS 14.0, *)
public protocol LinkItemModel : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  var text: Swift.String? { get }
  var href: Swift.String { get }
  var type: Swift.String? { get }
  var link: IdsvrHaapiUIKit.Link { get }
  var rel: Swift.String { get }
}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.LinkItemModel {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
public protocol SelectorItemModel : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  var title: Swift.String { get }
}
extension IdsvrHaapiUIKit.SelectorItemModel {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
public protocol SelectorItemInteractionActionModel : IdsvrHaapiUIKit.InteractionActionModel, IdsvrHaapiUIKit.SelectorItemModel {
  var action: any IdsvrHaapiUIKit.RepresentationActionModel { get }
  var type: Swift.String? { get }
  var icon: Swift.String? { get }
  var shouldKeepFocus: Swift.Bool { get }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers public class Problem : ObjectiveC.NSObject, IdsvrHaapiUIKit.ProblemRepresentation {
  final public let type: IdsvrHaapiUIKit.ProblemType
  @objc final public let metadata: IdsvrHaapiUIKit.Metadata?
  @objc final public let title: IdsvrHaapiUIKit.Message?
  final public let messages: [IdsvrHaapiUIKit.UserMessage]
  final public let links: [IdsvrHaapiUIKit.Link]
  @objc final public let rawJsonString: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
public protocol FollowUpTag {
  var subsystem: Swift.String { get }
  var tagName: Swift.String { get }
}
extension IdsvrHaapiUIKit.FollowUpTag {
  public var osLog: os.OSLog {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class LoadingIndicatorViewStyle : IdsvrHaapiUIKit.UIStyle {
  public init(strokeColor: UIKit.UIColor, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
final public class ActionableButtonStyle : IdsvrHaapiUIKit.UIStyle {
  public init(iconTextPadding: Swift.Double, borderWidth: Swift.Double, cornerRadius: Swift.Double, loadingIndicatorViewStyle: IdsvrHaapiUIKit.LoadingIndicatorViewStyle, textAppearance: IdsvrHaapiUIKit.TextAppearance, textColor: UIKit.UIColor, borderColor: UIKit.UIColor, image: UIKit.UIImage?, minHeight: Swift.Double?, paddingLeft: Swift.Double, paddingTop: Swift.Double, paddingRight: Swift.Double, paddingBottom: Swift.Double, backgroundColor: UIKit.UIColor?)
  @objc deinit
}
@available(iOS 14, *)
public enum HaapiError : IdsvrHaapiUIKit.IdsvrError, Swift.Error {
  case communication(message: Swift.String, cause: (any Swift.Error)? = nil)
  case serverError(_: Swift.String, errorDescription: Swift.String, statusCode: Swift.Int)
  @available(*, deprecated, message: "This case is being replaced by `serverError`.")
  case invalidStatusCode(_: Swift.Int)
  case invalidURLResponse(_: Foundation.URLResponse?, reason: Swift.String, cause: (any Swift.Error)? = nil)
  case attestationNotSupported
  case attestationFailure(cause: (any Swift.Error)? = nil)
  case attestationKeyGenFailure(cause: (any Swift.Error)? = nil)
  case attestationRefusedByServer(cause: (any Swift.Error)? = nil)
  case assertionFailure(cause: (any Swift.Error)? = nil)
  case dpopKeyCreationFailure(cause: any Swift.Error)
  case dpopProofCreationFailure(cause: any Swift.Error)
  case dpopProofFailure(message: Swift.String, cause: any Swift.Error)
  case haapiTokenManagerIsClosed
  case haapiTokenManagerIsExpired
  case illegalState(message: Swift.String)
  case invalidConfiguration(reason: Swift.String)
  case haapiTokenManagerAlreadyExists(name: Swift.String)
  public var failureReason: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var error: Swift.String {
    get
  }
  public var cause: (any Swift.Error)? {
    get
  }
  public var recoverySuggestion: IdsvrHaapiUIKit.IdsvrErrorHandling {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class Message : ObjectiveC.NSObject, Swift.Codable {
  final public let key: Swift.String?
  final public let literal: Swift.String
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@_Concurrency.MainActor @preconcurrency open class FormViewController : IdsvrHaapiUIKit.BaseViewController<any IdsvrHaapiUIKit.FormModel, IdsvrHaapiUIKit.FormViewControllerStyle> {
  @_Concurrency.MainActor @preconcurrency override public init(_ model: any IdsvrHaapiUIKit.FormModel, style: IdsvrHaapiUIKit.FormViewControllerStyle, commonStyle: IdsvrHaapiUIKit.HaapiUIViewControllerStyle)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency required public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency override public func handleProblemModel(_ problemModel: any IdsvrHaapiUIKit.ProblemModel) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func handleFormModel(_ formModel: any IdsvrHaapiUIKit.FormModel) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func stopLoading()
  @_Concurrency.MainActor @preconcurrency override public func hasLoading() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func apply(style: IdsvrHaapiUIKit.FormViewControllerStyle)
}
@available(iOS, introduced: 14.0, deprecated: 16.0, message: "Cannot be used in iOS 17. Use `HaapiFlowViewControllerRepresentable` instead.")
extension IdsvrHaapiUIKit.HaapiFlowVCRepresentable : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HaapiFlowViewControllerRepresentable : Swift.Sendable {}
extension IdsvrHaapiUIKit.PresentationMode : Swift.Equatable {}
extension IdsvrHaapiUIKit.PresentationMode : Swift.Hashable {}
extension IdsvrHaapiUIKit.AuthenticatorSelectionPresentation : Swift.Equatable {}
extension IdsvrHaapiUIKit.AuthenticatorSelectionPresentation : Swift.Hashable {}
extension IdsvrHaapiUIKit.HaapiAccessorOption : Swift.Equatable {}
extension IdsvrHaapiUIKit.HaapiAccessorOption : Swift.Hashable {}
extension IdsvrHaapiUIKit.HaapiAccessorOption : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.JWTAsymmetricAlgorithm : Swift.Equatable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.JWTAsymmetricAlgorithm : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.JWTAsymmetricAlgorithm : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.JWTSymmetricAlgorithm : Swift.Equatable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.JWTSymmetricAlgorithm : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.JWTSymmetricAlgorithm : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.DriverFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiUIKit.DriverFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiUIKit.DriverFollowUpTag : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ProblemType : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.TextFormField.Kind : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.PollingStatus : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.PollingStatus : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.PollingStatus : Swift.BitwiseCopyable {}
extension IdsvrHaapiUIKit.SdkFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiUIKit.SdkFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiUIKit.SdkFollowUpTag : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.CryptoKeyType : Swift.Equatable {}
extension IdsvrHaapiUIKit.CryptoKeyType : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ClientOperationName : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.TokenRevocationResponse : Swift.Sendable {}
@available(iOS 14, *)
extension IdsvrHaapiUIKit.MimeTypes : Swift.Equatable {}
@available(iOS 14, *)
extension IdsvrHaapiUIKit.MimeTypes : Swift.Hashable {}
@available(iOS 14, *)
extension IdsvrHaapiUIKit.MimeTypes : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.LogType : Swift.Equatable {}
extension IdsvrHaapiUIKit.LogType : Swift.Hashable {}
extension IdsvrHaapiUIKit.LogType : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.UIKitFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiUIKit.UIKitFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiUIKit.UIKitFollowUpTag : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.RepresentationType : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.RepresentationType : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.RepresentationType : Swift.BitwiseCopyable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.ActionKind : Swift.Sendable {}
extension IdsvrHaapiUIKit.RetryCondition : Swift.Equatable {}
extension IdsvrHaapiUIKit.RetryCondition : Swift.Hashable {}
extension IdsvrHaapiUIKit.TestingEnvironment : Swift.Equatable {}
extension IdsvrHaapiUIKit.TestingEnvironment : Swift.Hashable {}
extension IdsvrHaapiUIKit.TestingEnvironment : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.TestingArgument : Swift.Equatable {}
extension IdsvrHaapiUIKit.TestingArgument : Swift.Hashable {}
extension IdsvrHaapiUIKit.TestingArgument : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HandleableProblemType : Swift.Equatable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HandleableProblemType : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.HandleableProblemType : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.MessageStyleAttribute : Swift.Equatable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.MessageStyleAttribute : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiUIKit.MessageStyleAttribute : Swift.RawRepresentable {}
extension IdsvrHaapiUIKit.InteractionItemButtonType : Swift.Equatable {}
extension IdsvrHaapiUIKit.InteractionItemButtonType : Swift.Hashable {}
extension IdsvrHaapiUIKit.InteractionItemButtonType : Swift.RawRepresentable {}
